
GccApplication43.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000176c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00802000  0000176c  00001800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fc  00802040  00802040  00001840  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d78  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aa3  00000000  00000000  0000892c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001afe  00000000  00000000  0000c3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000ded0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000037fc  00000000  00000000  0000e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002541  00000000  00000000  00011fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  000144e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_119>
     1e0:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 86 04 	jmp	0x90c	; 0x90c <uartF0_fgetc>
     200:	0c 94 be 04 	jmp	0x97c	; 0x97c <uartF0_fputc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e6       	ldi	r30, 0x6C	; 108
     21c:	f7 e1       	ldi	r31, 0x17	; 23
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 34       	cpi	r26, 0x40	; 64
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	21 e2       	ldi	r18, 0x21	; 33
     230:	a0 e4       	ldi	r26, 0x40	; 64
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	ac 33       	cpi	r26, 0x3C	; 60
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
     242:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
     24a:	e0 e5       	ldi	r30, 0x50	; 80
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
     258:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     25c:	83 ff       	sbrs	r24, 3
     25e:	fc cf       	rjmp	.-8      	; 0x258 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
     260:	e0 e5       	ldi	r30, 0x50	; 80
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	82 ec       	ldi	r24, 0xC2	; 194
     266:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
     268:	80 81       	ld	r24, Z
     26a:	80 61       	ori	r24, 0x10	; 16
     26c:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
     26e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     272:	84 ff       	sbrs	r24, 4
     274:	fc cf       	rjmp	.-8      	; 0x26e <Config32MHzClock_Ext16M+0x24>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
     276:	88 ed       	ldi	r24, 0xD8	; 216
     278:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
     27a:	84 e0       	ldi	r24, 0x04	; 4
     27c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7be040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
     280:	e0 e5       	ldi	r30, 0x50	; 80
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
     28a:	80 81       	ld	r24, Z
     28c:	8d 7f       	andi	r24, 0xFD	; 253
     28e:	80 83       	st	Z, r24
     290:	08 95       	ret

00000292 <__vector_104>:

uint8_t  pipe[5] = {0x48, 0x76, 0x41, 0x30, 0x31};


ISR(PORTF_INT0_vect)
{
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	0b b6       	in	r0, 0x3b	; 59
     29e:	0f 92       	push	r0
     2a0:	1f 93       	push	r17
     2a2:	2f 93       	push	r18
     2a4:	3f 93       	push	r19
     2a6:	4f 93       	push	r20
     2a8:	5f 93       	push	r21
     2aa:	6f 93       	push	r22
     2ac:	7f 93       	push	r23
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
     2b2:	af 93       	push	r26
     2b4:	bf 93       	push	r27
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <__vector_104+0x2e>
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t  packet_length;
    uint8_t tx_ds, max_rt, rx_dr;
	nrfWhatHappened(&tx_ds, &max_rt, &rx_dr);
     2c4:	ae 01       	movw	r20, r28
     2c6:	4d 5f       	subi	r20, 0xFD	; 253
     2c8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ca:	be 01       	movw	r22, r28
     2cc:	6e 5f       	subi	r22, 0xFE	; 254
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	0e 94 16 03 	call	0x62c	; 0x62c <nrfWhatHappened>
	
	if (rx_dr) {
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	88 23       	and	r24, r24
     2dc:	69 f0       	breq	.+26     	; 0x2f8 <__vector_104+0x66>
	  packet_length =  nrfGetDynamicPayloadSize();
     2de:	0e 94 af 03 	call	0x75e	; 0x75e <nrfGetDynamicPayloadSize>
     2e2:	18 2f       	mov	r17, r24
	  nrfRead( received_packet, packet_length );
     2e4:	68 2f       	mov	r22, r24
     2e6:	85 e1       	ldi	r24, 0x15	; 21
     2e8:	91 e2       	ldi	r25, 0x21	; 33
     2ea:	0e 94 b3 02 	call	0x566	; 0x566 <nrfRead>
	  received_packet[packet_length] = '\0';
     2ee:	e1 2f       	mov	r30, r17
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	eb 5e       	subi	r30, 0xEB	; 235
     2f4:	fe 4d       	sbci	r31, 0xDE	; 222
     2f6:	10 82       	st	Z, r1
      }
	
	flag = 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__data_end>
     300:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__data_end+0x1>
}
     304:	23 96       	adiw	r28, 0x03	; 3
     306:	cd bf       	out	0x3d, r28	; 61
     308:	de bf       	out	0x3e, r29	; 62
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	7f 91       	pop	r23
     31c:	6f 91       	pop	r22
     31e:	5f 91       	pop	r21
     320:	4f 91       	pop	r20
     322:	3f 91       	pop	r19
     324:	2f 91       	pop	r18
     326:	1f 91       	pop	r17
     328:	0f 90       	pop	r0
     32a:	0b be       	out	0x3b, r0	; 59
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <nrfInit>:

void nrfInit(void)
{
  nrfspiInit();
     336:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfspiInit>
  nrfBegin();
     33a:	0e 94 16 04 	call	0x82c	; 0x82c <nrfBegin>

  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);  // was 1000 en 8
     33e:	6f e0       	ldi	r22, 0x0F	; 15
     340:	80 e5       	ldi	r24, 0x50	; 80
     342:	0e 94 0c 04 	call	0x818	; 0x818 <nrfSetRetries>
  nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nrfSetPALevel>
  nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);
     34c:	80 e2       	ldi	r24, 0x20	; 32
     34e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <nrfSetDataRate>
  nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	0e 94 fe 03 	call	0x7fc	; 0x7fc <nrfSetCRCLength>
  nrfSetChannel(125);
     358:	8d e7       	ldi	r24, 0x7D	; 125
     35a:	0e 94 c1 03 	call	0x782	; 0x782 <nrfSetChannel>
  nrfSetAutoAck(1);
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	0e 94 cd 03 	call	0x79a	; 0x79a <nrfSetAutoAck>
  nrfEnableDynamicPayloads();
     364:	0e 94 8c 03 	call	0x718	; 0x718 <nrfEnableDynamicPayloads>

  nrfClearInterruptBits();
     368:	0e 94 11 04 	call	0x822	; 0x822 <nrfClearInterruptBits>
  nrfFlushRx();
     36c:	0e 94 ba 02 	call	0x574	; 0x574 <nrfFlushRx>
  nrfFlushTx();
     370:	0e 94 c9 02 	call	0x592	; 0x592 <nrfFlushTx>

  // Interrupt Pin
  PORTF.INT0MASK |= PIN6_bm;
     374:	e0 ea       	ldi	r30, 0xA0	; 160
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	82 85       	ldd	r24, Z+10	; 0x0a
     37a:	80 64       	ori	r24, 0x40	; 64
     37c:	82 87       	std	Z+10, r24	; 0x0a
  PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	86 8b       	std	Z+22, r24	; 0x16
  PORTF.INTCTRL   = (PORTF.INTCTRL & ~PORT_INT0LVL_gm) |
     382:	81 85       	ldd	r24, Z+9	; 0x09
     384:	8c 7f       	andi	r24, 0xFC	; 252
     386:	81 60       	ori	r24, 0x01	; 1
     388:	81 87       	std	Z+9, r24	; 0x09
                     PORT_INT0LVL_LO_gc ;  // Interrupts Low Level

  PORTF.OUTSET = PIN0_bm;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	85 83       	std	Z+5, r24	; 0x05
  nrfOpenReadingPipe(0,pipe);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e2       	ldi	r23, 0x20	; 32
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 34 03 	call	0x668	; 0x668 <nrfOpenReadingPipe>
  nrfStartListening();
     398:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <nrfStartListening>

  nrfPowerUp();
     39c:	0e 94 0d 03 	call	0x61a	; 0x61a <nrfPowerUp>
  nrfStartListening();
     3a0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <nrfStartListening>
     3a4:	08 95       	ret

000003a6 <main>:


int main(void)
{
  
  Config32MHzClock_Ext16M();
     3a6:	0e 94 25 01 	call	0x24a	; 0x24a <Config32MHzClock_Ext16M>

  nrfInit();
     3aa:	0e 94 9b 01 	call	0x336	; 0x336 <nrfInit>

  init_stream(F_CPU);
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	78 e4       	ldi	r23, 0x48	; 72
     3b2:	88 ee       	ldi	r24, 0xE8	; 232
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 b3 05 	call	0xb66	; 0xb66 <init_stream>
  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     3ba:	e0 ea       	ldi	r30, 0xA0	; 160
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	82 81       	ldd	r24, Z+2	; 0x02
     3c0:	81 60       	ori	r24, 0x01	; 1
     3c2:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET   = PIN0_bm;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
  sei();
     3ca:	78 94       	sei

  clear_screen();
     3cc:	86 e1       	ldi	r24, 0x16	; 22
     3ce:	90 e2       	ldi	r25, 0x20	; 32
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	0e 94 bc 08 	call	0x1178	; 0x1178 <printf>
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
 
while (1) {
	  
	  if (flag == 1) {
     3dc:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <__data_end>
     3e0:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <__data_end+0x1>
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <main+0x52>
	    printf("%s\n", received_packet);
     3e8:	85 e1       	ldi	r24, 0x15	; 21
     3ea:	91 e2       	ldi	r25, 0x21	; 33
     3ec:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <puts>
	    flag = 0;
     3f0:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <__data_end>
     3f4:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <__data_end+0x1>
	   }
	  if (strncmp(received_packet, "HEllO", 5) == 0) {
     3f8:	45 e0       	ldi	r20, 0x05	; 5
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	62 e2       	ldi	r22, 0x22	; 34
     3fe:	70 e2       	ldi	r23, 0x20	; 32
     400:	85 e1       	ldi	r24, 0x15	; 21
     402:	91 e2       	ldi	r25, 0x21	; 33
     404:	0e 94 ae 08 	call	0x115c	; 0x115c <strncmp>
     408:	89 2b       	or	r24, r25
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		  PORTC.OUTSET = PIN0_bm;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7be645>
	  }
	  
	   if (strncmp(received_packet, "WORLD", 5) == 0) {
     412:	45 e0       	ldi	r20, 0x05	; 5
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	68 e2       	ldi	r22, 0x28	; 40
     418:	70 e2       	ldi	r23, 0x20	; 32
     41a:	85 e1       	ldi	r24, 0x15	; 21
     41c:	91 e2       	ldi	r25, 0x21	; 33
     41e:	0e 94 ae 08 	call	0x115c	; 0x115c <strncmp>
     422:	89 2b       	or	r24, r25
     424:	d9 f6       	brne	.-74     	; 0x3dc <main+0x36>
		   PORTC.OUTCLR = PIN0_bm;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7be646>
     42c:	d7 cf       	rjmp	.-82     	; 0x3dc <main+0x36>

0000042e <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	c0 ea       	ldi	r28, 0xA0	; 160
     436:	d6 e0       	ldi	r29, 0x06	; 6
     438:	10 e2       	ldi	r17, 0x20	; 32
     43a:	1e 83       	std	Y+6, r17	; 0x06
     43c:	8f 71       	andi	r24, 0x1F	; 31
     43e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     448:	1d 83       	std	Y+5, r17	; 0x05
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <nrfWriteRegisterMulti>:
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	8b 01       	movw	r16, r22
     462:	c4 2f       	mov	r28, r20
     464:	90 e2       	ldi	r25, 0x20	; 32
     466:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7be6a6>
     46a:	8f 71       	andi	r24, 0x1F	; 31
     46c:	80 62       	ori	r24, 0x20	; 32
     46e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     472:	d8 2e       	mov	r13, r24
     474:	0a c0       	rjmp	.+20     	; 0x48a <nrfWriteRegisterMulti+0x38>
     476:	78 01       	movw	r14, r16
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	e8 1a       	sub	r14, r24
     47c:	f8 0a       	sbc	r15, r24
     47e:	f8 01       	movw	r30, r16
     480:	80 81       	ld	r24, Z
     482:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     486:	cd 2f       	mov	r28, r29
     488:	87 01       	movw	r16, r14
     48a:	df ef       	ldi	r29, 0xFF	; 255
     48c:	dc 0f       	add	r29, r28
     48e:	c1 11       	cpse	r28, r1
     490:	f2 cf       	rjmp	.-28     	; 0x476 <nrfWriteRegisterMulti+0x24>
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7be6a5>
     498:	8d 2d       	mov	r24, r13
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	08 95       	ret

000004aa <nrfWriteRegister>:
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	f6 2e       	mov	r15, r22
     4b6:	c0 ea       	ldi	r28, 0xA0	; 160
     4b8:	d6 e0       	ldi	r29, 0x06	; 6
     4ba:	10 e2       	ldi	r17, 0x20	; 32
     4bc:	1e 83       	std	Y+6, r17	; 0x06
     4be:	8f 71       	andi	r24, 0x1F	; 31
     4c0:	80 62       	ori	r24, 0x20	; 32
     4c2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     4c6:	08 2f       	mov	r16, r24
     4c8:	8f 2d       	mov	r24, r15
     4ca:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     4ce:	1d 83       	std	Y+5, r17	; 0x05
     4d0:	80 2f       	mov	r24, r16
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	08 95       	ret

000004de <nrfReadPayload>:
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	8c 01       	movw	r16, r24
     4f0:	d6 2f       	mov	r29, r22
     4f2:	c0 91 06 20 	lds	r28, 0x2006	; 0x802006 <fixed_payload_size>
     4f6:	c6 17       	cp	r28, r22
     4f8:	08 f4       	brcc	.+2      	; 0x4fc <nrfReadPayload+0x1e>
     4fa:	dc 2f       	mov	r29, r28
     4fc:	80 91 47 20 	lds	r24, 0x2047	; 0x802047 <dynamic_payloads_enabled>
     500:	81 11       	cpse	r24, r1
     502:	02 c0       	rjmp	.+4      	; 0x508 <nrfReadPayload+0x2a>
     504:	cd 1b       	sub	r28, r29
     506:	01 c0       	rjmp	.+2      	; 0x50a <nrfReadPayload+0x2c>
     508:	c0 e0       	ldi	r28, 0x00	; 0
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7be6a6>
     510:	81 e6       	ldi	r24, 0x61	; 97
     512:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     516:	e8 2e       	mov	r14, r24
     518:	0b c0       	rjmp	.+22     	; 0x530 <nrfReadPayload+0x52>
     51a:	68 01       	movw	r12, r16
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	c8 1a       	sub	r12, r24
     520:	d8 0a       	sbc	r13, r24
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     528:	f8 01       	movw	r30, r16
     52a:	80 83       	st	Z, r24
     52c:	df 2d       	mov	r29, r15
     52e:	86 01       	movw	r16, r12
     530:	ff 24       	eor	r15, r15
     532:	fa 94       	dec	r15
     534:	fd 0e       	add	r15, r29
     536:	d1 11       	cpse	r29, r1
     538:	f0 cf       	rjmp	.-32     	; 0x51a <nrfReadPayload+0x3c>
     53a:	04 c0       	rjmp	.+8      	; 0x544 <nrfReadPayload+0x66>
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     542:	cd 2f       	mov	r28, r29
     544:	df ef       	ldi	r29, 0xFF	; 255
     546:	dc 0f       	add	r29, r28
     548:	c1 11       	cpse	r28, r1
     54a:	f8 cf       	rjmp	.-16     	; 0x53c <nrfReadPayload+0x5e>
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7be6a5>
     552:	8e 2d       	mov	r24, r14
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	08 95       	ret

00000566 <nrfRead>:
     566:	0e 94 6f 02 	call	0x4de	; 0x4de <nrfReadPayload>
     56a:	87 e1       	ldi	r24, 0x17	; 23
     56c:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     570:	81 70       	andi	r24, 0x01	; 1
     572:	08 95       	ret

00000574 <nrfFlushRx>:
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	c0 ea       	ldi	r28, 0xA0	; 160
     57c:	d6 e0       	ldi	r29, 0x06	; 6
     57e:	10 e2       	ldi	r17, 0x20	; 32
     580:	1e 83       	std	Y+6, r17	; 0x06
     582:	82 ee       	ldi	r24, 0xE2	; 226
     584:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     588:	1d 83       	std	Y+5, r17	; 0x05
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	08 95       	ret

00000592 <nrfFlushTx>:
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	c0 ea       	ldi	r28, 0xA0	; 160
     59a:	d6 e0       	ldi	r29, 0x06	; 6
     59c:	10 e2       	ldi	r17, 0x20	; 32
     59e:	1e 83       	std	Y+6, r17	; 0x06
     5a0:	81 ee       	ldi	r24, 0xE1	; 225
     5a2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     5a6:	1d 83       	std	Y+5, r17	; 0x05
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	08 95       	ret

000005b0 <nrfStartListening>:
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     5b6:	81 fd       	sbrc	r24, 1
     5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <nrfStartListening+0x22>
     5ba:	68 2f       	mov	r22, r24
     5bc:	63 60       	ori	r22, 0x03	; 3
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     5c4:	8f e7       	ldi	r24, 0x7F	; 127
     5c6:	9e e3       	ldi	r25, 0x3E	; 62
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <nrfStartListening+0x18>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <nrfStartListening+0x1e>
     5ce:	00 00       	nop
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <nrfStartListening+0x2c>
     5d2:	68 2f       	mov	r22, r24
     5d4:	61 60       	ori	r22, 0x01	; 1
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	94 e0       	ldi	r25, 0x04	; 4
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <nrfStartListening+0x30>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <nrfStartListening+0x36>
     5e6:	00 00       	nop
     5e8:	60 e7       	ldi	r22, 0x70	; 112
     5ea:	87 e0       	ldi	r24, 0x07	; 7
     5ec:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     5f0:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <addr_width>
     5f4:	62 e4       	ldi	r22, 0x42	; 66
     5f6:	70 e2       	ldi	r23, 0x20	; 32
     5f8:	8a e0       	ldi	r24, 0x0A	; 10
     5fa:	0e 94 29 02 	call	0x452	; 0x452 <nrfWriteRegisterMulti>
     5fe:	0e 94 ba 02 	call	0x574	; 0x574 <nrfFlushRx>
     602:	0e 94 c9 02 	call	0x592	; 0x592 <nrfFlushTx>
     606:	80 e8       	ldi	r24, 0x80	; 128
     608:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7be6a5>
     60c:	8f e0       	ldi	r24, 0x0F	; 15
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <nrfStartListening+0x60>
     614:	00 c0       	rjmp	.+0      	; 0x616 <nrfStartListening+0x66>
     616:	00 00       	nop
     618:	08 95       	ret

0000061a <nrfPowerUp>:
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     620:	68 2f       	mov	r22, r24
     622:	62 60       	ori	r22, 0x02	; 2
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     62a:	08 95       	ret

0000062c <nrfWhatHappened>:
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	7c 01       	movw	r14, r24
     63a:	8b 01       	movw	r16, r22
     63c:	ea 01       	movw	r28, r20
     63e:	60 e7       	ldi	r22, 0x70	; 112
     640:	87 e0       	ldi	r24, 0x07	; 7
     642:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     646:	98 2f       	mov	r25, r24
     648:	90 72       	andi	r25, 0x20	; 32
     64a:	f7 01       	movw	r30, r14
     64c:	90 83       	st	Z, r25
     64e:	98 2f       	mov	r25, r24
     650:	90 71       	andi	r25, 0x10	; 16
     652:	f8 01       	movw	r30, r16
     654:	90 83       	st	Z, r25
     656:	80 74       	andi	r24, 0x40	; 64
     658:	88 83       	st	Y, r24
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	08 95       	ret

00000668 <nrfOpenReadingPipe>:
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	c8 2f       	mov	r28, r24
     672:	8b 01       	movw	r16, r22
     674:	81 11       	cpse	r24, r1
     676:	07 c0       	rjmp	.+14     	; 0x686 <nrfOpenReadingPipe+0x1e>
     678:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <addr_width>
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	82 e4       	ldi	r24, 0x42	; 66
     680:	90 e2       	ldi	r25, 0x20	; 32
     682:	0e 94 a5 08 	call	0x114a	; 0x114a <memcpy>
     686:	c7 30       	cpi	r28, 0x07	; 7
     688:	80 f5       	brcc	.+96     	; 0x6ea <nrfOpenReadingPipe+0x82>
     68a:	c2 30       	cpi	r28, 0x02	; 2
     68c:	58 f4       	brcc	.+22     	; 0x6a4 <nrfOpenReadingPipe+0x3c>
     68e:	ec 2f       	mov	r30, r28
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	e6 5c       	subi	r30, 0xC6	; 198
     694:	ff 4d       	sbci	r31, 0xDF	; 223
     696:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <addr_width>
     69a:	b8 01       	movw	r22, r16
     69c:	80 81       	ld	r24, Z
     69e:	0e 94 29 02 	call	0x452	; 0x452 <nrfWriteRegisterMulti>
     6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <nrfOpenReadingPipe+0x4e>
     6a4:	ec 2f       	mov	r30, r28
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	e6 5c       	subi	r30, 0xC6	; 198
     6aa:	ff 4d       	sbci	r31, 0xDF	; 223
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	b8 01       	movw	r22, r16
     6b0:	80 81       	ld	r24, Z
     6b2:	0e 94 29 02 	call	0x452	; 0x452 <nrfWriteRegisterMulti>
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	fe 01       	movw	r30, r28
     6ba:	ec 5c       	subi	r30, 0xCC	; 204
     6bc:	ff 4d       	sbci	r31, 0xDF	; 223
     6be:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <fixed_payload_size>
     6c2:	80 81       	ld	r24, Z
     6c4:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     6ce:	c2 5d       	subi	r28, 0xD2	; 210
     6d0:	df 4d       	sbci	r29, 0xDF	; 223
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	08 80       	ld	r0, Y
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <nrfOpenReadingPipe+0x76>
     6da:	66 0f       	add	r22, r22
     6dc:	77 1f       	adc	r23, r23
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <nrfOpenReadingPipe+0x72>
     6e2:	68 2b       	or	r22, r24
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <nrfToggleFeatures>:
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	c0 ea       	ldi	r28, 0xA0	; 160
     6fc:	d6 e0       	ldi	r29, 0x06	; 6
     6fe:	10 e2       	ldi	r17, 0x20	; 32
     700:	1e 83       	std	Y+6, r17	; 0x06
     702:	80 e5       	ldi	r24, 0x50	; 80
     704:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     708:	83 e7       	ldi	r24, 0x73	; 115
     70a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     70e:	1d 83       	std	Y+5, r17	; 0x05
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	08 95       	ret

00000718 <nrfEnableDynamicPayloads>:
     718:	8d e1       	ldi	r24, 0x1D	; 29
     71a:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     71e:	68 2f       	mov	r22, r24
     720:	64 60       	ori	r22, 0x04	; 4
     722:	8d e1       	ldi	r24, 0x1D	; 29
     724:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     728:	8d e1       	ldi	r24, 0x1D	; 29
     72a:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     72e:	81 11       	cpse	r24, r1
     730:	0a c0       	rjmp	.+20     	; 0x746 <nrfEnableDynamicPayloads+0x2e>
     732:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <nrfToggleFeatures>
     736:	8d e1       	ldi	r24, 0x1D	; 29
     738:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     73c:	68 2f       	mov	r22, r24
     73e:	64 60       	ori	r22, 0x04	; 4
     740:	8d e1       	ldi	r24, 0x1D	; 29
     742:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     746:	8c e1       	ldi	r24, 0x1C	; 28
     748:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     74c:	68 2f       	mov	r22, r24
     74e:	6f 63       	ori	r22, 0x3F	; 63
     750:	8c e1       	ldi	r24, 0x1C	; 28
     752:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 47 20 	sts	0x2047, r24	; 0x802047 <dynamic_payloads_enabled>
     75c:	08 95       	ret

0000075e <nrfGetDynamicPayloadSize>:
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	c0 ea       	ldi	r28, 0xA0	; 160
     766:	d6 e0       	ldi	r29, 0x06	; 6
     768:	10 e2       	ldi	r17, 0x20	; 32
     76a:	1e 83       	std	Y+6, r17	; 0x06
     76c:	80 e6       	ldi	r24, 0x60	; 96
     76e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfspiTransfer>
     778:	1d 83       	std	Y+5, r17	; 0x05
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	08 95       	ret

00000782 <nrfSetChannel>:
     782:	88 23       	and	r24, r24
     784:	2c f0       	brlt	.+10     	; 0x790 <nrfSetChannel+0xe>
     786:	68 2f       	mov	r22, r24
     788:	85 e0       	ldi	r24, 0x05	; 5
     78a:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     78e:	08 95       	ret
     790:	6f e7       	ldi	r22, 0x7F	; 127
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     798:	08 95       	ret

0000079a <nrfSetAutoAck>:
     79a:	88 23       	and	r24, r24
     79c:	29 f0       	breq	.+10     	; 0x7a8 <nrfSetAutoAck+0xe>
     79e:	6f e3       	ldi	r22, 0x3F	; 63
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     7a6:	08 95       	ret
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     7b0:	08 95       	ret

000007b2 <nrfSetPALevel>:
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     7bc:	89 7f       	andi	r24, 0xF9	; 249
     7be:	c6 70       	andi	r28, 0x06	; 6
     7c0:	68 2f       	mov	r22, r24
     7c2:	6c 2b       	or	r22, r28
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <nrfSetDataRate>:
     7ce:	cf 93       	push	r28
     7d0:	c8 2f       	mov	r28, r24
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     7d8:	87 7d       	andi	r24, 0xD7	; 215
     7da:	9c 2f       	mov	r25, r28
     7dc:	98 72       	andi	r25, 0x28	; 40
     7de:	68 2f       	mov	r22, r24
     7e0:	69 2b       	or	r22, r25
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     7e8:	86 e0       	ldi	r24, 0x06	; 6
     7ea:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     7ee:	c8 13       	cpse	r28, r24
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <nrfSetDataRate+0x28>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <nrfSetDataRate+0x2a>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <nrfSetCRCLength>:
     7fc:	cf 93       	push	r28
     7fe:	c8 2f       	mov	r28, r24
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 17 02 	call	0x42e	; 0x42e <nrfReadRegister>
     806:	83 7f       	andi	r24, 0xF3	; 243
     808:	cc 70       	andi	r28, 0x0C	; 12
     80a:	68 2f       	mov	r22, r24
     80c:	6c 2b       	or	r22, r28
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <nrfSetRetries>:
     818:	68 2b       	or	r22, r24
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     820:	08 95       	ret

00000822 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     822:	60 e7       	ldi	r22, 0x70	; 112
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>
     82a:	08 95       	ret

0000082c <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82c:	8f e3       	ldi	r24, 0x3F	; 63
     82e:	9c e9       	ldi	r25, 0x9C	; 156
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <nrfBegin+0x4>
     834:	00 c0       	rjmp	.+0      	; 0x836 <nrfBegin+0xa>
     836:	00 00       	nop

  // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
  // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);
     838:	6f e0       	ldi	r22, 0x0F	; 15
     83a:	80 e5       	ldi	r24, 0x50	; 80
     83c:	0e 94 0c 04 	call	0x818	; 0x818 <nrfSetRetries>

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     846:	80 e2       	ldi	r24, 0x20	; 32
     848:	0e 94 e7 03 	call	0x7ce	; 0x7ce <nrfSetDataRate>
     84c:	88 23       	and	r24, r24
     84e:	19 f0       	breq	.+6      	; 0x856 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 e7 03 	call	0x7ce	; 0x7ce <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     85c:	8c e0       	ldi	r24, 0x0C	; 12
     85e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	8c e1       	ldi	r24, 0x1C	; 28
     866:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c1 03 	call	0x782	; 0x782 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     870:	0e 94 11 04 	call	0x822	; 0x822 <nrfClearInterruptBits>
  nrfFlushRx();
     874:	0e 94 ba 02 	call	0x574	; 0x574 <nrfFlushRx>
  nrfFlushTx();
     878:	0e 94 c9 02 	call	0x592	; 0x592 <nrfFlushTx>
     87c:	08 95       	ret

0000087e <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     87e:	e0 e4       	ldi	r30, 0x40	; 64
     880:	f6 e0       	ldi	r31, 0x06	; 6
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     88e:	e0 ea       	ldi	r30, 0xA0	; 160
     890:	f6 e0       	ldi	r31, 0x06	; 6
     892:	80 e2       	ldi	r24, 0x20	; 32
     894:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     89a:	80 e8       	ldi	r24, 0x80	; 128
     89c:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     89e:	e0 ea       	ldi	r30, 0xA0	; 160
     8a0:	f8 e0       	ldi	r31, 0x08	; 8
     8a2:	88 e1       	ldi	r24, 0x18	; 24
     8a4:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     8a6:	80 ec       	ldi	r24, 0xC0	; 192
     8a8:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     8aa:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	86 83       	std	Z+6, r24	; 0x06
     8b0:	08 95       	ret

000008b2 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     8b2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7be8a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     8b6:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7be8a1>
     8ba:	86 ff       	sbrs	r24, 6
     8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <nrfspiTransfer+0x4>
  USARTC0.STATUS |= USART_TXCIF_bm;
     8be:	e0 ea       	ldi	r30, 0xA0	; 160
     8c0:	f8 e0       	ldi	r31, 0x08	; 8
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
     8c4:	80 64       	ori	r24, 0x40	; 64
     8c6:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     8c8:	80 81       	ld	r24, Z
}
     8ca:	08 95       	ret

000008cc <CanRead_F0>:
    }
  }
  *p = '\0';

  return buf;
}
     8cc:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <rx_f0_wridx>
     8d0:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <rx_f0_rdidx>
     8d4:	89 17       	cp	r24, r25
     8d6:	10 f0       	brcs	.+4      	; 0x8dc <CanRead_F0+0x10>
     8d8:	89 1b       	sub	r24, r25
     8da:	08 95       	ret
     8dc:	89 1b       	sub	r24, r25
     8de:	8c 59       	subi	r24, 0x9C	; 156
     8e0:	08 95       	ret

000008e2 <ReadByte_F0>:
     8e2:	cf 93       	push	r28
     8e4:	c0 91 ac 20 	lds	r28, 0x20AC	; 0x8020ac <rx_f0_rdidx>
     8e8:	0e 94 66 04 	call	0x8cc	; 0x8cc <CanRead_F0>
     8ec:	88 23       	and	r24, r24
     8ee:	e1 f3       	breq	.-8      	; 0x8e8 <ReadByte_F0+0x6>
     8f0:	ec 2f       	mov	r30, r28
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	e8 5b       	subi	r30, 0xB8	; 184
     8f6:	ff 4d       	sbci	r31, 0xDF	; 223
     8f8:	80 81       	ld	r24, Z
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	9c 0f       	add	r25, r28
     8fe:	94 36       	cpi	r25, 0x64	; 100
     900:	08 f0       	brcs	.+2      	; 0x904 <ReadByte_F0+0x22>
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 ac 20 	sts	0x20AC, r25	; 0x8020ac <rx_f0_rdidx>
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <uartF0_fgetc>:
     90c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ReadByte_F0>
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	08 95       	ret

00000914 <CanWrite_F0>:
     914:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <tx_f0_wridx>
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	92 0f       	add	r25, r18
     91c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <tx_f0_rdidx>
     920:	94 36       	cpi	r25, 0x64	; 100
     922:	10 f0       	brcs	.+4      	; 0x928 <CanWrite_F0+0x14>
     924:	9d e9       	ldi	r25, 0x9D	; 157
     926:	92 0f       	add	r25, r18
     928:	89 17       	cp	r24, r25
     92a:	10 f0       	brcs	.+4      	; 0x930 <CanWrite_F0+0x1c>
     92c:	89 1b       	sub	r24, r25
     92e:	08 95       	ret
     930:	89 1b       	sub	r24, r25
     932:	8c 59       	subi	r24, 0x9C	; 156
     934:	08 95       	ret

00000936 <WriteByte_F0>:
     936:	cf 93       	push	r28
     938:	c8 2f       	mov	r28, r24
     93a:	03 c0       	rjmp	.+6      	; 0x942 <WriteByte_F0+0xc>
     93c:	81 e2       	ldi	r24, 0x21	; 33
     93e:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7beba3>
     942:	0e 94 8a 04 	call	0x914	; 0x914 <CanWrite_F0>
     946:	88 23       	and	r24, r24
     948:	c9 f3       	breq	.-14     	; 0x93c <WriteByte_F0+0x6>
     94a:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <tx_f0_wridx>
     94e:	e8 2f       	mov	r30, r24
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	e2 55       	subi	r30, 0x52	; 82
     954:	ff 4d       	sbci	r31, 0xDF	; 223
     956:	c0 83       	st	Z, r28
     958:	8f 5f       	subi	r24, 0xFF	; 255
     95a:	84 36       	cpi	r24, 0x64	; 100
     95c:	08 f0       	brcs	.+2      	; 0x960 <WriteByte_F0+0x2a>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	e0 ea       	ldi	r30, 0xA0	; 160
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	92 81       	ldd	r25, Z+2	; 0x02
     966:	29 2f       	mov	r18, r25
     968:	2e 7f       	andi	r18, 0xFE	; 254
     96a:	22 83       	std	Z+2, r18	; 0x02
     96c:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <tx_f0_wridx>
     970:	81 e2       	ldi	r24, 0x21	; 33
     972:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7beba3>
     976:	92 83       	std	Z+2, r25	; 0x02
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <uartF0_fputc>:
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	d8 2f       	mov	r29, r24
     982:	cf ef       	ldi	r28, 0xFF	; 255
     984:	03 c0       	rjmp	.+6      	; 0x98c <uartF0_fputc+0x10>
     986:	cc 23       	and	r28, r28
     988:	29 f0       	breq	.+10     	; 0x994 <uartF0_fputc+0x18>
     98a:	c1 50       	subi	r28, 0x01	; 1
     98c:	0e 94 8a 04 	call	0x914	; 0x914 <CanWrite_F0>
     990:	88 23       	and	r24, r24
     992:	c9 f3       	breq	.-14     	; 0x986 <uartF0_fputc+0xa>
     994:	cc 23       	and	r28, r28
     996:	59 f0       	breq	.+22     	; 0x9ae <uartF0_fputc+0x32>
     998:	da 30       	cpi	r29, 0x0A	; 10
     99a:	19 f4       	brne	.+6      	; 0x9a2 <uartF0_fputc+0x26>
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	0e 94 9b 04 	call	0x936	; 0x936 <WriteByte_F0>
     9a2:	8d 2f       	mov	r24, r29
     9a4:	0e 94 9b 04 	call	0x936	; 0x936 <WriteByte_F0>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <uartF0_fputc+0x36>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <calc_bsel>:
     9b8:	4f 92       	push	r4
     9ba:	5f 92       	push	r5
     9bc:	6f 92       	push	r6
     9be:	7f 92       	push	r7
     9c0:	8f 92       	push	r8
     9c2:	9f 92       	push	r9
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	29 01       	movw	r4, r18
     9da:	3a 01       	movw	r6, r20
     9dc:	2e 2d       	mov	r18, r14
     9de:	21 70       	andi	r18, 0x01	; 1
     9e0:	c0 e1       	ldi	r28, 0x10	; 16
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <calc_bsel+0x32>
     9e6:	d5 95       	asr	r29
     9e8:	c7 95       	ror	r28
     9ea:	2a 95       	dec	r18
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <calc_bsel+0x2e>
     9ee:	00 23       	and	r16, r16
     9f0:	f4 f5       	brge	.+124    	; 0xa6e <calc_bsel+0xb6>
     9f2:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     9f6:	6b 01       	movw	r12, r22
     9f8:	7c 01       	movw	r14, r24
     9fa:	c3 01       	movw	r24, r6
     9fc:	b2 01       	movw	r22, r4
     9fe:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     a02:	4b 01       	movw	r8, r22
     a04:	5c 01       	movw	r10, r24
     a06:	dd 27       	eor	r29, r29
     a08:	be 01       	movw	r22, r28
     a0a:	dd 0f       	add	r29, r29
     a0c:	88 0b       	sbc	r24, r24
     a0e:	99 0b       	sbc	r25, r25
     a10:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     a14:	a5 01       	movw	r20, r10
     a16:	94 01       	movw	r18, r8
     a18:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 bc 06 	call	0xd78	; 0xd78 <__divsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e8       	ldi	r20, 0x80	; 128
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__subsf3>
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24
     a38:	11 27       	eor	r17, r17
     a3a:	01 95       	neg	r16
     a3c:	0c f4       	brge	.+2      	; 0xa40 <calc_bsel+0x88>
     a3e:	10 95       	com	r17
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <calc_bsel+0x92>
     a46:	66 0f       	add	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	0a 95       	dec	r16
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <calc_bsel+0x8e>
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     a5a:	a7 01       	movw	r20, r14
     a5c:	96 01       	movw	r18, r12
     a5e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     a62:	0e 94 58 08 	call	0x10b0	; 0x10b0 <round>
     a66:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fixunssfsi>
     a6a:	cb 01       	movw	r24, r22
     a6c:	3c c0       	rjmp	.+120    	; 0xae6 <calc_bsel+0x12e>
     a6e:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     a72:	4b 01       	movw	r8, r22
     a74:	5c 01       	movw	r10, r24
     a76:	c3 01       	movw	r24, r6
     a78:	b2 01       	movw	r22, r4
     a7a:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     a7e:	6b 01       	movw	r12, r22
     a80:	7c 01       	movw	r14, r24
     a82:	be 01       	movw	r22, r28
     a84:	77 27       	eor	r23, r23
     a86:	07 2e       	mov	r0, r23
     a88:	00 0c       	add	r0, r0
     a8a:	88 0b       	sbc	r24, r24
     a8c:	99 0b       	sbc	r25, r25
     a8e:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     a92:	a7 01       	movw	r20, r14
     a94:	96 01       	movw	r18, r12
     a96:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	c5 01       	movw	r24, r10
     aa0:	b4 01       	movw	r22, r8
     aa2:	0e 94 bc 06 	call	0xd78	; 0xd78 <__divsf3>
     aa6:	6b 01       	movw	r12, r22
     aa8:	7c 01       	movw	r14, r24
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <calc_bsel+0xfc>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	0a 95       	dec	r16
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <calc_bsel+0xf8>
     ab8:	07 2e       	mov	r0, r23
     aba:	00 0c       	add	r0, r0
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	c7 01       	movw	r24, r14
     aca:	b6 01       	movw	r22, r12
     acc:	0e 94 bc 06 	call	0xd78	; 0xd78 <__divsf3>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	5f e3       	ldi	r21, 0x3F	; 63
     ad8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__subsf3>
     adc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <round>
     ae0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fixunssfsi>
     ae4:	cb 01       	movw	r24, r22
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	7f 90       	pop	r7
     b00:	6f 90       	pop	r6
     b02:	5f 90       	pop	r5
     b04:	4f 90       	pop	r4
     b06:	08 95       	ret

00000b08 <calc_bscale>:
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	ef 92       	push	r14
     b1a:	0f 93       	push	r16
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	2b 01       	movw	r4, r22
     b22:	3c 01       	movw	r6, r24
     b24:	49 01       	movw	r8, r18
     b26:	5a 01       	movw	r10, r20
     b28:	d0 2f       	mov	r29, r16
     b2a:	c9 ef       	ldi	r28, 0xF9	; 249
     b2c:	0c c0       	rjmp	.+24     	; 0xb46 <calc_bscale+0x3e>
     b2e:	ed 2e       	mov	r14, r29
     b30:	0c 2f       	mov	r16, r28
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	c3 01       	movw	r24, r6
     b38:	b2 01       	movw	r22, r4
     b3a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <calc_bsel>
     b3e:	81 15       	cp	r24, r1
     b40:	90 41       	sbci	r25, 0x10	; 16
     b42:	18 f0       	brcs	.+6      	; 0xb4a <calc_bscale+0x42>
     b44:	cf 5f       	subi	r28, 0xFF	; 255
     b46:	c8 30       	cpi	r28, 0x08	; 8
     b48:	94 f3       	brlt	.-28     	; 0xb2e <calc_bscale+0x26>
     b4a:	8c 2f       	mov	r24, r28
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	0f 91       	pop	r16
     b52:	ef 90       	pop	r14
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	4f 90       	pop	r4
     b64:	08 95       	ret

00000b66 <init_stream>:
 *           If you want to use another baud rate you can change it in this function.
 *
 *  \return  void
 */
void init_stream(uint32_t f_cpu)
{
     b66:	8f 92       	push	r8
     b68:	9f 92       	push	r9
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	ef 92       	push	r14
     b70:	0f 93       	push	r16
     b72:	cf 93       	push	r28
     b74:	4b 01       	movw	r8, r22
     b76:	5c 01       	movw	r10, r24
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, BAUD_115K2, UART_NO_DOUBLE_CLK);
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	32 ec       	ldi	r19, 0xC2	; 194
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	0e 94 84 05 	call	0xb08	; 0xb08 <calc_bscale>
     b86:	c8 2f       	mov	r28, r24
  bsel   = calc_bsel(f_cpu, BAUD_115K2, bscale, UART_NO_DOUBLE_CLK);
     b88:	e1 2c       	mov	r14, r1
     b8a:	08 2f       	mov	r16, r24
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	32 ec       	ldi	r19, 0xC2	; 194
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	c5 01       	movw	r24, r10
     b96:	b4 01       	movw	r22, r8
     b98:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <calc_bsel>

	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;  // pullup on rx
     b9c:	e0 ea       	ldi	r30, 0xA0	; 160
     b9e:	f6 e0       	ldi	r31, 0x06	; 6
     ba0:	28 e1       	ldi	r18, 0x18	; 24
     ba2:	22 8b       	std	Z+18, r18	; 0x12
	PORTF.OUTSET = PIN3_bm;               // tx high
     ba4:	38 e0       	ldi	r19, 0x08	; 8
     ba6:	35 83       	std	Z+5, r19	; 0x05
	PORTF.DIRSET = PIN3_bm;
     ba8:	31 83       	std	Z+1, r19	; 0x01
	PORTF.DIRCLR = PIN2_bm;
     baa:	34 e0       	ldi	r19, 0x04	; 4
     bac:	32 83       	std	Z+2, r19	; 0x02

	USARTF0.BAUDCTRLA = (bsel & USART_BSEL_gm);
     bae:	e0 ea       	ldi	r30, 0xA0	; 160
     bb0:	fb e0       	ldi	r31, 0x0B	; 11
     bb2:	86 83       	std	Z+6, r24	; 0x06
	USARTF0.BAUDCTRLB = ((bscale << USART_BSCALE_gp) & USART_BSCALE_gm) |
     bb4:	c2 95       	swap	r28
     bb6:	c0 7f       	andi	r28, 0xF0	; 240
     bb8:	9f 70       	andi	r25, 0x0F	; 15
     bba:	c9 2b       	or	r28, r25
     bbc:	c7 83       	std	Z+7, r28	; 0x07
                      ((bsel >> 8) & ~USART_BSCALE_gm);
	
 	USARTF0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     bbe:	24 83       	std	Z+4, r18	; 0x04

	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | 
     bc0:	80 e2       	ldi	r24, 0x20	; 32
     bc2:	83 83       	std	Z+3, r24	; 0x03
                  USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     bc4:	e0 ea       	ldi	r30, 0xA0	; 160
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	83 60       	ori	r24, 0x03	; 3
     bcc:	82 83       	std	Z+2, r24	; 0x02
  stdout = stdin = &uartF0_stdinout;
     bce:	e6 e3       	ldi	r30, 0x36	; 54
     bd0:	f1 e2       	ldi	r31, 0x21	; 33
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	90 e2       	ldi	r25, 0x20	; 32
     bd6:	80 83       	st	Z, r24
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	82 83       	std	Z+2, r24	; 0x02
     bdc:	93 83       	std	Z+3, r25	; 0x03
	
} // init_stream
     bde:	cf 91       	pop	r28
     be0:	0f 91       	pop	r16
     be2:	ef 90       	pop	r14
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	08 95       	ret

00000bee <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	0b b6       	in	r0, 0x3b	; 59
     bfa:	0f 92       	push	r0
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	ef 93       	push	r30
     c02:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
     c04:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
     c08:	e8 2f       	mov	r30, r24
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
     c10:	e8 5b       	subi	r30, 0xB8	; 184
     c12:	ff 4d       	sbci	r31, 0xDF	; 223
     c14:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
     c16:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
     c18:	84 36       	cpi	r24, 0x64	; 100
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <__vector_119+0x30>
	nextSlot = 0;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
     c1e:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <rx_f0_rdidx>
     c22:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
     c24:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	0f 90       	pop	r0
     c32:	0b be       	out	0x3b, r0	; 59
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	0b b6       	in	r0, 0x3b	; 59
     c4a:	0f 92       	push	r0
     c4c:	2f 93       	push	r18
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
     c56:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
     c5a:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
     c5e:	89 17       	cp	r24, r25
     c60:	59 f0       	breq	.+22     	; 0xc78 <__vector_120+0x3a>
		USARTF0.DATA = tx_f0_buf[curSlot];
     c62:	e8 2f       	mov	r30, r24
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	e2 55       	subi	r30, 0x52	; 82
     c68:	ff 4d       	sbci	r31, 0xDF	; 223
     c6a:	20 81       	ld	r18, Z
     c6c:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
		nextSlot = curSlot + 1;
     c70:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
     c72:	84 36       	cpi	r24, 0x64	; 100
     c74:	08 f0       	brcs	.+2      	; 0xc78 <__vector_120+0x3a>
		nextSlot = 0;
     c76:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
     c78:	89 13       	cpse	r24, r25
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <__vector_120+0x44>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
     c7c:	90 e2       	ldi	r25, 0x20	; 32
     c7e:	90 93 a3 0b 	sts	0x0BA3, r25	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7beba3>
	
	tx_f0_rdidx = nextSlot;
     c82:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0b be       	out	0x3b, r0	; 59
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__subsf3>:
     c9e:	50 58       	subi	r21, 0x80	; 128

00000ca0 <__addsf3>:
     ca0:	bb 27       	eor	r27, r27
     ca2:	aa 27       	eor	r26, r26
     ca4:	0e 94 67 06 	call	0xcce	; 0xcce <__addsf3x>
     ca8:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     cac:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     cb0:	38 f0       	brcs	.+14     	; 0xcc0 <__addsf3+0x20>
     cb2:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3+0x20>
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <__addsf3+0x28>
     cba:	9f 3f       	cpi	r25, 0xFF	; 255
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <__addsf3+0x24>
     cbe:	26 f4       	brtc	.+8      	; 0xcc8 <__addsf3+0x28>
     cc0:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
     cc4:	0e f4       	brtc	.+2      	; 0xcc8 <__addsf3+0x28>
     cc6:	e0 95       	com	r30
     cc8:	e7 fb       	bst	r30, 7
     cca:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>

00000cce <__addsf3x>:
     cce:	e9 2f       	mov	r30, r25
     cd0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__addsf3+0xc>
     cd6:	ba 17       	cp	r27, r26
     cd8:	62 07       	cpc	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__addsf3x+0x1c>
     ce2:	79 f4       	brne	.+30     	; 0xd02 <__addsf3x+0x34>
     ce4:	a6 f5       	brtc	.+104    	; 0xd4e <__addsf3x+0x80>
     ce6:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_zero>
     cea:	0e f4       	brtc	.+2      	; 0xcee <__addsf3x+0x20>
     cec:	e0 95       	com	r30
     cee:	0b 2e       	mov	r0, r27
     cf0:	ba 2f       	mov	r27, r26
     cf2:	a0 2d       	mov	r26, r0
     cf4:	0b 01       	movw	r0, r22
     cf6:	b9 01       	movw	r22, r18
     cf8:	90 01       	movw	r18, r0
     cfa:	0c 01       	movw	r0, r24
     cfc:	ca 01       	movw	r24, r20
     cfe:	a0 01       	movw	r20, r0
     d00:	11 24       	eor	r1, r1
     d02:	ff 27       	eor	r31, r31
     d04:	59 1b       	sub	r21, r25
     d06:	99 f0       	breq	.+38     	; 0xd2e <__addsf3x+0x60>
     d08:	59 3f       	cpi	r21, 0xF9	; 249
     d0a:	50 f4       	brcc	.+20     	; 0xd20 <__addsf3x+0x52>
     d0c:	50 3e       	cpi	r21, 0xE0	; 224
     d0e:	68 f1       	brcs	.+90     	; 0xd6a <__addsf3x+0x9c>
     d10:	1a 16       	cp	r1, r26
     d12:	f0 40       	sbci	r31, 0x00	; 0
     d14:	a2 2f       	mov	r26, r18
     d16:	23 2f       	mov	r18, r19
     d18:	34 2f       	mov	r19, r20
     d1a:	44 27       	eor	r20, r20
     d1c:	58 5f       	subi	r21, 0xF8	; 248
     d1e:	f3 cf       	rjmp	.-26     	; 0xd06 <__addsf3x+0x38>
     d20:	46 95       	lsr	r20
     d22:	37 95       	ror	r19
     d24:	27 95       	ror	r18
     d26:	a7 95       	ror	r26
     d28:	f0 40       	sbci	r31, 0x00	; 0
     d2a:	53 95       	inc	r21
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <__addsf3x+0x52>
     d2e:	7e f4       	brtc	.+30     	; 0xd4e <__addsf3x+0x80>
     d30:	1f 16       	cp	r1, r31
     d32:	ba 0b       	sbc	r27, r26
     d34:	62 0b       	sbc	r22, r18
     d36:	73 0b       	sbc	r23, r19
     d38:	84 0b       	sbc	r24, r20
     d3a:	ba f0       	brmi	.+46     	; 0xd6a <__addsf3x+0x9c>
     d3c:	91 50       	subi	r25, 0x01	; 1
     d3e:	a1 f0       	breq	.+40     	; 0xd68 <__addsf3x+0x9a>
     d40:	ff 0f       	add	r31, r31
     d42:	bb 1f       	adc	r27, r27
     d44:	66 1f       	adc	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	c2 f7       	brpl	.-16     	; 0xd3c <__addsf3x+0x6e>
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <__addsf3x+0x9c>
     d4e:	ba 0f       	add	r27, r26
     d50:	62 1f       	adc	r22, r18
     d52:	73 1f       	adc	r23, r19
     d54:	84 1f       	adc	r24, r20
     d56:	48 f4       	brcc	.+18     	; 0xd6a <__addsf3x+0x9c>
     d58:	87 95       	ror	r24
     d5a:	77 95       	ror	r23
     d5c:	67 95       	ror	r22
     d5e:	b7 95       	ror	r27
     d60:	f7 95       	ror	r31
     d62:	9e 3f       	cpi	r25, 0xFE	; 254
     d64:	08 f0       	brcs	.+2      	; 0xd68 <__addsf3x+0x9a>
     d66:	b0 cf       	rjmp	.-160    	; 0xcc8 <__addsf3+0x28>
     d68:	93 95       	inc	r25
     d6a:	88 0f       	add	r24, r24
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <__addsf3x+0xa2>
     d6e:	99 27       	eor	r25, r25
     d70:	ee 0f       	add	r30, r30
     d72:	97 95       	ror	r25
     d74:	87 95       	ror	r24
     d76:	08 95       	ret

00000d78 <__divsf3>:
     d78:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divsf3x>
     d7c:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     d80:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     d84:	58 f0       	brcs	.+22     	; 0xd9c <__divsf3+0x24>
     d86:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     d8a:	40 f0       	brcs	.+16     	; 0xd9c <__divsf3+0x24>
     d8c:	29 f4       	brne	.+10     	; 0xd98 <__divsf3+0x20>
     d8e:	5f 3f       	cpi	r21, 0xFF	; 255
     d90:	29 f0       	breq	.+10     	; 0xd9c <__divsf3+0x24>
     d92:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     d96:	51 11       	cpse	r21, r1
     d98:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     d9c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>

00000da0 <__divsf3x>:
     da0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     da4:	68 f3       	brcs	.-38     	; 0xd80 <__divsf3+0x8>

00000da6 <__divsf3_pse>:
     da6:	99 23       	and	r25, r25
     da8:	b1 f3       	breq	.-20     	; 0xd96 <__divsf3+0x1e>
     daa:	55 23       	and	r21, r21
     dac:	91 f3       	breq	.-28     	; 0xd92 <__divsf3+0x1a>
     dae:	95 1b       	sub	r25, r21
     db0:	55 0b       	sbc	r21, r21
     db2:	bb 27       	eor	r27, r27
     db4:	aa 27       	eor	r26, r26
     db6:	62 17       	cp	r22, r18
     db8:	73 07       	cpc	r23, r19
     dba:	84 07       	cpc	r24, r20
     dbc:	38 f0       	brcs	.+14     	; 0xdcc <__divsf3_pse+0x26>
     dbe:	9f 5f       	subi	r25, 0xFF	; 255
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	44 1f       	adc	r20, r20
     dc8:	aa 1f       	adc	r26, r26
     dca:	a9 f3       	breq	.-22     	; 0xdb6 <__divsf3_pse+0x10>
     dcc:	35 d0       	rcall	.+106    	; 0xe38 <__divsf3_pse+0x92>
     dce:	0e 2e       	mov	r0, r30
     dd0:	3a f0       	brmi	.+14     	; 0xde0 <__divsf3_pse+0x3a>
     dd2:	e0 e8       	ldi	r30, 0x80	; 128
     dd4:	32 d0       	rcall	.+100    	; 0xe3a <__divsf3_pse+0x94>
     dd6:	91 50       	subi	r25, 0x01	; 1
     dd8:	50 40       	sbci	r21, 0x00	; 0
     dda:	e6 95       	lsr	r30
     ddc:	00 1c       	adc	r0, r0
     dde:	ca f7       	brpl	.-14     	; 0xdd2 <__divsf3_pse+0x2c>
     de0:	2b d0       	rcall	.+86     	; 0xe38 <__divsf3_pse+0x92>
     de2:	fe 2f       	mov	r31, r30
     de4:	29 d0       	rcall	.+82     	; 0xe38 <__divsf3_pse+0x92>
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	bb 1f       	adc	r27, r27
     dee:	26 17       	cp	r18, r22
     df0:	37 07       	cpc	r19, r23
     df2:	48 07       	cpc	r20, r24
     df4:	ab 07       	cpc	r26, r27
     df6:	b0 e8       	ldi	r27, 0x80	; 128
     df8:	09 f0       	breq	.+2      	; 0xdfc <__divsf3_pse+0x56>
     dfa:	bb 0b       	sbc	r27, r27
     dfc:	80 2d       	mov	r24, r0
     dfe:	bf 01       	movw	r22, r30
     e00:	ff 27       	eor	r31, r31
     e02:	93 58       	subi	r25, 0x83	; 131
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	3a f0       	brmi	.+14     	; 0xe16 <__divsf3_pse+0x70>
     e08:	9e 3f       	cpi	r25, 0xFE	; 254
     e0a:	51 05       	cpc	r21, r1
     e0c:	78 f0       	brcs	.+30     	; 0xe2c <__divsf3_pse+0x86>
     e0e:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     e12:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     e16:	5f 3f       	cpi	r21, 0xFF	; 255
     e18:	e4 f3       	brlt	.-8      	; 0xe12 <__divsf3_pse+0x6c>
     e1a:	98 3e       	cpi	r25, 0xE8	; 232
     e1c:	d4 f3       	brlt	.-12     	; 0xe12 <__divsf3_pse+0x6c>
     e1e:	86 95       	lsr	r24
     e20:	77 95       	ror	r23
     e22:	67 95       	ror	r22
     e24:	b7 95       	ror	r27
     e26:	f7 95       	ror	r31
     e28:	9f 5f       	subi	r25, 0xFF	; 255
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__divsf3_pse+0x78>
     e2c:	88 0f       	add	r24, r24
     e2e:	91 1d       	adc	r25, r1
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24
     e34:	97 f9       	bld	r25, 7
     e36:	08 95       	ret
     e38:	e1 e0       	ldi	r30, 0x01	; 1
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	bb 1f       	adc	r27, r27
     e42:	62 17       	cp	r22, r18
     e44:	73 07       	cpc	r23, r19
     e46:	84 07       	cpc	r24, r20
     e48:	ba 07       	cpc	r27, r26
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__divsf3_pse+0xae>
     e4c:	62 1b       	sub	r22, r18
     e4e:	73 0b       	sbc	r23, r19
     e50:	84 0b       	sbc	r24, r20
     e52:	ba 0b       	sbc	r27, r26
     e54:	ee 1f       	adc	r30, r30
     e56:	88 f7       	brcc	.-30     	; 0xe3a <__divsf3_pse+0x94>
     e58:	e0 95       	com	r30
     e5a:	08 95       	ret

00000e5c <__fixunssfsi>:
     e5c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_splitA>
     e60:	88 f0       	brcs	.+34     	; 0xe84 <__fixunssfsi+0x28>
     e62:	9f 57       	subi	r25, 0x7F	; 127
     e64:	98 f0       	brcs	.+38     	; 0xe8c <__fixunssfsi+0x30>
     e66:	b9 2f       	mov	r27, r25
     e68:	99 27       	eor	r25, r25
     e6a:	b7 51       	subi	r27, 0x17	; 23
     e6c:	b0 f0       	brcs	.+44     	; 0xe9a <__fixunssfsi+0x3e>
     e6e:	e1 f0       	breq	.+56     	; 0xea8 <__fixunssfsi+0x4c>
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	1a f0       	brmi	.+6      	; 0xe80 <__fixunssfsi+0x24>
     e7a:	ba 95       	dec	r27
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <__fixunssfsi+0x14>
     e7e:	14 c0       	rjmp	.+40     	; 0xea8 <__fixunssfsi+0x4c>
     e80:	b1 30       	cpi	r27, 0x01	; 1
     e82:	91 f0       	breq	.+36     	; 0xea8 <__fixunssfsi+0x4c>
     e84:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__fp_zero>
     e88:	b1 e0       	ldi	r27, 0x01	; 1
     e8a:	08 95       	ret
     e8c:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_zero>
     e90:	67 2f       	mov	r22, r23
     e92:	78 2f       	mov	r23, r24
     e94:	88 27       	eor	r24, r24
     e96:	b8 5f       	subi	r27, 0xF8	; 248
     e98:	39 f0       	breq	.+14     	; 0xea8 <__fixunssfsi+0x4c>
     e9a:	b9 3f       	cpi	r27, 0xF9	; 249
     e9c:	cc f3       	brlt	.-14     	; 0xe90 <__fixunssfsi+0x34>
     e9e:	86 95       	lsr	r24
     ea0:	77 95       	ror	r23
     ea2:	67 95       	ror	r22
     ea4:	b3 95       	inc	r27
     ea6:	d9 f7       	brne	.-10     	; 0xe9e <__fixunssfsi+0x42>
     ea8:	3e f4       	brtc	.+14     	; 0xeb8 <__fixunssfsi+0x5c>
     eaa:	90 95       	com	r25
     eac:	80 95       	com	r24
     eae:	70 95       	com	r23
     eb0:	61 95       	neg	r22
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__floatunsisf>:
     eba:	e8 94       	clt
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <__floatsisf+0x12>

00000ebe <__floatsisf>:
     ebe:	97 fb       	bst	r25, 7
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__floatsisf+0x12>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	99 23       	and	r25, r25
     ed2:	a9 f0       	breq	.+42     	; 0xefe <__floatsisf+0x40>
     ed4:	f9 2f       	mov	r31, r25
     ed6:	96 e9       	ldi	r25, 0x96	; 150
     ed8:	bb 27       	eor	r27, r27
     eda:	93 95       	inc	r25
     edc:	f6 95       	lsr	r31
     ede:	87 95       	ror	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b7 95       	ror	r27
     ee6:	f1 11       	cpse	r31, r1
     ee8:	f8 cf       	rjmp	.-16     	; 0xeda <__floatsisf+0x1c>
     eea:	fa f4       	brpl	.+62     	; 0xf2a <__floatsisf+0x6c>
     eec:	bb 0f       	add	r27, r27
     eee:	11 f4       	brne	.+4      	; 0xef4 <__floatsisf+0x36>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <__floatsisf+0x6c>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <__floatsisf+0x6c>
     efe:	88 23       	and	r24, r24
     f00:	11 f0       	breq	.+4      	; 0xf06 <__floatsisf+0x48>
     f02:	96 e9       	ldi	r25, 0x96	; 150
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <__floatsisf+0x6a>
     f06:	77 23       	and	r23, r23
     f08:	21 f0       	breq	.+8      	; 0xf12 <__floatsisf+0x54>
     f0a:	9e e8       	ldi	r25, 0x8E	; 142
     f0c:	87 2f       	mov	r24, r23
     f0e:	76 2f       	mov	r23, r22
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <__floatsisf+0x5e>
     f12:	66 23       	and	r22, r22
     f14:	71 f0       	breq	.+28     	; 0xf32 <__floatsisf+0x74>
     f16:	96 e8       	ldi	r25, 0x86	; 134
     f18:	86 2f       	mov	r24, r22
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	2a f0       	brmi	.+10     	; 0xf2a <__floatsisf+0x6c>
     f20:	9a 95       	dec	r25
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	da f7       	brpl	.-10     	; 0xf20 <__floatsisf+0x62>
     f2a:	88 0f       	add	r24, r24
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	97 f9       	bld	r25, 7
     f32:	08 95       	ret

00000f34 <__fp_inf>:
     f34:	97 f9       	bld	r25, 7
     f36:	9f 67       	ori	r25, 0x7F	; 127
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <__fp_nan>:
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	80 ec       	ldi	r24, 0xC0	; 192
     f44:	08 95       	ret

00000f46 <__fp_pscA>:
     f46:	00 24       	eor	r0, r0
     f48:	0a 94       	dec	r0
     f4a:	16 16       	cp	r1, r22
     f4c:	17 06       	cpc	r1, r23
     f4e:	18 06       	cpc	r1, r24
     f50:	09 06       	cpc	r0, r25
     f52:	08 95       	ret

00000f54 <__fp_pscB>:
     f54:	00 24       	eor	r0, r0
     f56:	0a 94       	dec	r0
     f58:	12 16       	cp	r1, r18
     f5a:	13 06       	cpc	r1, r19
     f5c:	14 06       	cpc	r1, r20
     f5e:	05 06       	cpc	r0, r21
     f60:	08 95       	ret

00000f62 <__fp_round>:
     f62:	09 2e       	mov	r0, r25
     f64:	03 94       	inc	r0
     f66:	00 0c       	add	r0, r0
     f68:	11 f4       	brne	.+4      	; 0xf6e <__fp_round+0xc>
     f6a:	88 23       	and	r24, r24
     f6c:	52 f0       	brmi	.+20     	; 0xf82 <__fp_round+0x20>
     f6e:	bb 0f       	add	r27, r27
     f70:	40 f4       	brcc	.+16     	; 0xf82 <__fp_round+0x20>
     f72:	bf 2b       	or	r27, r31
     f74:	11 f4       	brne	.+4      	; 0xf7a <__fp_round+0x18>
     f76:	60 ff       	sbrs	r22, 0
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__fp_round+0x20>
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	08 95       	ret

00000f84 <__fp_split3>:
     f84:	57 fd       	sbrc	r21, 7
     f86:	90 58       	subi	r25, 0x80	; 128
     f88:	44 0f       	add	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <__fp_splitA+0x10>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	71 f0       	breq	.+28     	; 0xfae <__fp_splitA+0x1a>
     f92:	47 95       	ror	r20

00000f94 <__fp_splitA>:
     f94:	88 0f       	add	r24, r24
     f96:	97 fb       	bst	r25, 7
     f98:	99 1f       	adc	r25, r25
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <__fp_splitA+0x20>
     f9c:	9f 3f       	cpi	r25, 0xFF	; 255
     f9e:	79 f0       	breq	.+30     	; 0xfbe <__fp_splitA+0x2a>
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret
     fa4:	12 16       	cp	r1, r18
     fa6:	13 06       	cpc	r1, r19
     fa8:	14 06       	cpc	r1, r20
     faa:	55 1f       	adc	r21, r21
     fac:	f2 cf       	rjmp	.-28     	; 0xf92 <__fp_split3+0xe>
     fae:	46 95       	lsr	r20
     fb0:	f1 df       	rcall	.-30     	; 0xf94 <__fp_splitA>
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <__fp_splitA+0x30>
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	f1 cf       	rjmp	.-30     	; 0xfa0 <__fp_splitA+0xc>
     fbe:	86 95       	lsr	r24
     fc0:	71 05       	cpc	r23, r1
     fc2:	61 05       	cpc	r22, r1
     fc4:	08 94       	sec
     fc6:	08 95       	ret

00000fc8 <__fp_zero>:
     fc8:	e8 94       	clt

00000fca <__fp_szero>:
     fca:	bb 27       	eor	r27, r27
     fcc:	66 27       	eor	r22, r22
     fce:	77 27       	eor	r23, r23
     fd0:	cb 01       	movw	r24, r22
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret

00000fd6 <__mulsf3>:
     fd6:	0e 94 fe 07 	call	0xffc	; 0xffc <__mulsf3x>
     fda:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     fde:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     fe2:	38 f0       	brcs	.+14     	; 0xff2 <__mulsf3+0x1c>
     fe4:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <__mulsf3+0x1c>
     fea:	95 23       	and	r25, r21
     fec:	11 f0       	breq	.+4      	; 0xff2 <__mulsf3+0x1c>
     fee:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     ff2:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
     ff6:	11 24       	eor	r1, r1
     ff8:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>

00000ffc <__mulsf3x>:
     ffc:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
    1000:	70 f3       	brcs	.-36     	; 0xfde <__mulsf3+0x8>

00001002 <__mulsf3_pse>:
    1002:	95 9f       	mul	r25, r21
    1004:	c1 f3       	breq	.-16     	; 0xff6 <__mulsf3+0x20>
    1006:	95 0f       	add	r25, r21
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	55 1f       	adc	r21, r21
    100c:	62 9f       	mul	r22, r18
    100e:	f0 01       	movw	r30, r0
    1010:	72 9f       	mul	r23, r18
    1012:	bb 27       	eor	r27, r27
    1014:	f0 0d       	add	r31, r0
    1016:	b1 1d       	adc	r27, r1
    1018:	63 9f       	mul	r22, r19
    101a:	aa 27       	eor	r26, r26
    101c:	f0 0d       	add	r31, r0
    101e:	b1 1d       	adc	r27, r1
    1020:	aa 1f       	adc	r26, r26
    1022:	64 9f       	mul	r22, r20
    1024:	66 27       	eor	r22, r22
    1026:	b0 0d       	add	r27, r0
    1028:	a1 1d       	adc	r26, r1
    102a:	66 1f       	adc	r22, r22
    102c:	82 9f       	mul	r24, r18
    102e:	22 27       	eor	r18, r18
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	62 1f       	adc	r22, r18
    1036:	73 9f       	mul	r23, r19
    1038:	b0 0d       	add	r27, r0
    103a:	a1 1d       	adc	r26, r1
    103c:	62 1f       	adc	r22, r18
    103e:	83 9f       	mul	r24, r19
    1040:	a0 0d       	add	r26, r0
    1042:	61 1d       	adc	r22, r1
    1044:	22 1f       	adc	r18, r18
    1046:	74 9f       	mul	r23, r20
    1048:	33 27       	eor	r19, r19
    104a:	a0 0d       	add	r26, r0
    104c:	61 1d       	adc	r22, r1
    104e:	23 1f       	adc	r18, r19
    1050:	84 9f       	mul	r24, r20
    1052:	60 0d       	add	r22, r0
    1054:	21 1d       	adc	r18, r1
    1056:	82 2f       	mov	r24, r18
    1058:	76 2f       	mov	r23, r22
    105a:	6a 2f       	mov	r22, r26
    105c:	11 24       	eor	r1, r1
    105e:	9f 57       	subi	r25, 0x7F	; 127
    1060:	50 40       	sbci	r21, 0x00	; 0
    1062:	9a f0       	brmi	.+38     	; 0x108a <__mulsf3_pse+0x88>
    1064:	f1 f0       	breq	.+60     	; 0x10a2 <__mulsf3_pse+0xa0>
    1066:	88 23       	and	r24, r24
    1068:	4a f0       	brmi	.+18     	; 0x107c <__mulsf3_pse+0x7a>
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	bb 1f       	adc	r27, r27
    1070:	66 1f       	adc	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	a9 f7       	brne	.-22     	; 0x1066 <__mulsf3_pse+0x64>
    107c:	9e 3f       	cpi	r25, 0xFE	; 254
    107e:	51 05       	cpc	r21, r1
    1080:	80 f0       	brcs	.+32     	; 0x10a2 <__mulsf3_pse+0xa0>
    1082:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
    1086:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	e4 f3       	brlt	.-8      	; 0x1086 <__mulsf3_pse+0x84>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	d4 f3       	brlt	.-12     	; 0x1086 <__mulsf3_pse+0x84>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	e7 95       	ror	r30
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <__mulsf3_pse+0x90>
    10a2:	fe 2b       	or	r31, r30
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <round>:
    10b0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_splitA>
    10b4:	e8 f0       	brcs	.+58     	; 0x10f0 <round+0x40>
    10b6:	9e 37       	cpi	r25, 0x7E	; 126
    10b8:	e8 f0       	brcs	.+58     	; 0x10f4 <round+0x44>
    10ba:	96 39       	cpi	r25, 0x96	; 150
    10bc:	b8 f4       	brcc	.+46     	; 0x10ec <round+0x3c>
    10be:	9e 38       	cpi	r25, 0x8E	; 142
    10c0:	48 f4       	brcc	.+18     	; 0x10d4 <round+0x24>
    10c2:	67 2f       	mov	r22, r23
    10c4:	78 2f       	mov	r23, r24
    10c6:	88 27       	eor	r24, r24
    10c8:	98 5f       	subi	r25, 0xF8	; 248
    10ca:	f9 cf       	rjmp	.-14     	; 0x10be <round+0xe>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	93 95       	inc	r25
    10d4:	95 39       	cpi	r25, 0x95	; 149
    10d6:	d0 f3       	brcs	.-12     	; 0x10cc <round+0x1c>
    10d8:	b6 2f       	mov	r27, r22
    10da:	b1 70       	andi	r27, 0x01	; 1
    10dc:	6b 0f       	add	r22, r27
    10de:	71 1d       	adc	r23, r1
    10e0:	81 1d       	adc	r24, r1
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <round+0x3c>
    10e4:	87 95       	ror	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	93 95       	inc	r25
    10ec:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_mintl>
    10f0:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_mpack>
    10f4:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>

000010f8 <__fp_mintl>:
    10f8:	88 23       	and	r24, r24
    10fa:	71 f4       	brne	.+28     	; 0x1118 <__fp_mintl+0x20>
    10fc:	77 23       	and	r23, r23
    10fe:	21 f0       	breq	.+8      	; 0x1108 <__fp_mintl+0x10>
    1100:	98 50       	subi	r25, 0x08	; 8
    1102:	87 2b       	or	r24, r23
    1104:	76 2f       	mov	r23, r22
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <__fp_mintl+0x1e>
    1108:	66 23       	and	r22, r22
    110a:	11 f4       	brne	.+4      	; 0x1110 <__fp_mintl+0x18>
    110c:	99 27       	eor	r25, r25
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__fp_mintl+0x32>
    1110:	90 51       	subi	r25, 0x10	; 16
    1112:	86 2b       	or	r24, r22
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	2a f0       	brmi	.+10     	; 0x1124 <__fp_mintl+0x2c>
    111a:	9a 95       	dec	r25
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	da f7       	brpl	.-10     	; 0x111a <__fp_mintl+0x22>
    1124:	88 0f       	add	r24, r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <__fp_mpack>:
    112e:	9f 3f       	cpi	r25, 0xFF	; 255
    1130:	31 f0       	breq	.+12     	; 0x113e <__fp_mpack_finite+0xc>

00001132 <__fp_mpack_finite>:
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	20 f4       	brcc	.+8      	; 0x113e <__fp_mpack_finite+0xc>
    1136:	87 95       	ror	r24
    1138:	77 95       	ror	r23
    113a:	67 95       	ror	r22
    113c:	b7 95       	ror	r27
    113e:	88 0f       	add	r24, r24
    1140:	91 1d       	adc	r25, r1
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <memcpy>:
    114a:	fb 01       	movw	r30, r22
    114c:	dc 01       	movw	r26, r24
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <memcpy+0xa>
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	41 50       	subi	r20, 0x01	; 1
    1156:	50 40       	sbci	r21, 0x00	; 0
    1158:	d8 f7       	brcc	.-10     	; 0x1150 <memcpy+0x6>
    115a:	08 95       	ret

0000115c <strncmp>:
    115c:	fb 01       	movw	r30, r22
    115e:	dc 01       	movw	r26, r24
    1160:	41 50       	subi	r20, 0x01	; 1
    1162:	50 40       	sbci	r21, 0x00	; 0
    1164:	30 f0       	brcs	.+12     	; 0x1172 <strncmp+0x16>
    1166:	8d 91       	ld	r24, X+
    1168:	01 90       	ld	r0, Z+
    116a:	80 19       	sub	r24, r0
    116c:	19 f4       	brne	.+6      	; 0x1174 <strncmp+0x18>
    116e:	00 20       	and	r0, r0
    1170:	b9 f7       	brne	.-18     	; 0x1160 <strncmp+0x4>
    1172:	88 1b       	sub	r24, r24
    1174:	99 0b       	sbc	r25, r25
    1176:	08 95       	ret

00001178 <printf>:
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	ae 01       	movw	r20, r28
    1182:	4a 5f       	subi	r20, 0xFA	; 250
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	fa 01       	movw	r30, r20
    1188:	61 91       	ld	r22, Z+
    118a:	71 91       	ld	r23, Z+
    118c:	af 01       	movw	r20, r30
    118e:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <__iob+0x2>
    1192:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <__iob+0x3>
    1196:	0e 94 00 09 	call	0x1200	; 0x1200 <vfprintf>
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <puts>:
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <__iob+0x2>
    11ac:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <__iob+0x3>
    11b0:	23 81       	ldd	r18, Z+3	; 0x03
    11b2:	21 ff       	sbrs	r18, 1
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <puts+0x4c>
    11b6:	8c 01       	movw	r16, r24
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
    11ba:	c0 e0       	ldi	r28, 0x00	; 0
    11bc:	f8 01       	movw	r30, r16
    11be:	81 91       	ld	r24, Z+
    11c0:	8f 01       	movw	r16, r30
    11c2:	60 91 38 21 	lds	r22, 0x2138	; 0x802138 <__iob+0x2>
    11c6:	70 91 39 21 	lds	r23, 0x2139	; 0x802139 <__iob+0x3>
    11ca:	db 01       	movw	r26, r22
    11cc:	18 96       	adiw	r26, 0x08	; 8
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	19 97       	sbiw	r26, 0x09	; 9
    11d4:	88 23       	and	r24, r24
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <puts+0x44>
    11d8:	19 95       	eicall
    11da:	89 2b       	or	r24, r25
    11dc:	79 f3       	breq	.-34     	; 0x11bc <puts+0x1c>
    11de:	df ef       	ldi	r29, 0xFF	; 255
    11e0:	cf ef       	ldi	r28, 0xFF	; 255
    11e2:	ec cf       	rjmp	.-40     	; 0x11bc <puts+0x1c>
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	19 95       	eicall
    11e8:	89 2b       	or	r24, r25
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <puts+0x52>
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <puts+0x56>
    11f2:	8d 2f       	mov	r24, r29
    11f4:	9c 2f       	mov	r25, r28
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <vfprintf>:
    1200:	2f 92       	push	r2
    1202:	3f 92       	push	r3
    1204:	4f 92       	push	r4
    1206:	5f 92       	push	r5
    1208:	6f 92       	push	r6
    120a:	7f 92       	push	r7
    120c:	8f 92       	push	r8
    120e:	9f 92       	push	r9
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	2b 97       	sbiw	r28, 0x0b	; 11
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	6c 01       	movw	r12, r24
    1230:	7b 01       	movw	r14, r22
    1232:	8a 01       	movw	r16, r20
    1234:	fc 01       	movw	r30, r24
    1236:	16 82       	std	Z+6, r1	; 0x06
    1238:	17 82       	std	Z+7, r1	; 0x07
    123a:	83 81       	ldd	r24, Z+3	; 0x03
    123c:	81 ff       	sbrs	r24, 1
    123e:	cc c1       	rjmp	.+920    	; 0x15d8 <vfprintf+0x3d8>
    1240:	ce 01       	movw	r24, r28
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	3c 01       	movw	r6, r24
    1246:	f6 01       	movw	r30, r12
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	f7 01       	movw	r30, r14
    124c:	93 fd       	sbrc	r25, 3
    124e:	85 91       	lpm	r24, Z+
    1250:	93 ff       	sbrs	r25, 3
    1252:	81 91       	ld	r24, Z+
    1254:	7f 01       	movw	r14, r30
    1256:	88 23       	and	r24, r24
    1258:	09 f4       	brne	.+2      	; 0x125c <vfprintf+0x5c>
    125a:	ba c1       	rjmp	.+884    	; 0x15d0 <vfprintf+0x3d0>
    125c:	85 32       	cpi	r24, 0x25	; 37
    125e:	39 f4       	brne	.+14     	; 0x126e <vfprintf+0x6e>
    1260:	93 fd       	sbrc	r25, 3
    1262:	85 91       	lpm	r24, Z+
    1264:	93 ff       	sbrs	r25, 3
    1266:	81 91       	ld	r24, Z+
    1268:	7f 01       	movw	r14, r30
    126a:	85 32       	cpi	r24, 0x25	; 37
    126c:	29 f4       	brne	.+10     	; 0x1278 <vfprintf+0x78>
    126e:	b6 01       	movw	r22, r12
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    1276:	e7 cf       	rjmp	.-50     	; 0x1246 <vfprintf+0x46>
    1278:	91 2c       	mov	r9, r1
    127a:	21 2c       	mov	r2, r1
    127c:	31 2c       	mov	r3, r1
    127e:	ff e1       	ldi	r31, 0x1F	; 31
    1280:	f3 15       	cp	r31, r3
    1282:	d8 f0       	brcs	.+54     	; 0x12ba <vfprintf+0xba>
    1284:	8b 32       	cpi	r24, 0x2B	; 43
    1286:	79 f0       	breq	.+30     	; 0x12a6 <vfprintf+0xa6>
    1288:	38 f4       	brcc	.+14     	; 0x1298 <vfprintf+0x98>
    128a:	80 32       	cpi	r24, 0x20	; 32
    128c:	79 f0       	breq	.+30     	; 0x12ac <vfprintf+0xac>
    128e:	83 32       	cpi	r24, 0x23	; 35
    1290:	a1 f4       	brne	.+40     	; 0x12ba <vfprintf+0xba>
    1292:	23 2d       	mov	r18, r3
    1294:	20 61       	ori	r18, 0x10	; 16
    1296:	1d c0       	rjmp	.+58     	; 0x12d2 <vfprintf+0xd2>
    1298:	8d 32       	cpi	r24, 0x2D	; 45
    129a:	61 f0       	breq	.+24     	; 0x12b4 <vfprintf+0xb4>
    129c:	80 33       	cpi	r24, 0x30	; 48
    129e:	69 f4       	brne	.+26     	; 0x12ba <vfprintf+0xba>
    12a0:	23 2d       	mov	r18, r3
    12a2:	21 60       	ori	r18, 0x01	; 1
    12a4:	16 c0       	rjmp	.+44     	; 0x12d2 <vfprintf+0xd2>
    12a6:	83 2d       	mov	r24, r3
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	38 2e       	mov	r3, r24
    12ac:	e3 2d       	mov	r30, r3
    12ae:	e4 60       	ori	r30, 0x04	; 4
    12b0:	3e 2e       	mov	r3, r30
    12b2:	2a c0       	rjmp	.+84     	; 0x1308 <vfprintf+0x108>
    12b4:	f3 2d       	mov	r31, r3
    12b6:	f8 60       	ori	r31, 0x08	; 8
    12b8:	1d c0       	rjmp	.+58     	; 0x12f4 <vfprintf+0xf4>
    12ba:	37 fc       	sbrc	r3, 7
    12bc:	2d c0       	rjmp	.+90     	; 0x1318 <vfprintf+0x118>
    12be:	20 ed       	ldi	r18, 0xD0	; 208
    12c0:	28 0f       	add	r18, r24
    12c2:	2a 30       	cpi	r18, 0x0A	; 10
    12c4:	40 f0       	brcs	.+16     	; 0x12d6 <vfprintf+0xd6>
    12c6:	8e 32       	cpi	r24, 0x2E	; 46
    12c8:	b9 f4       	brne	.+46     	; 0x12f8 <vfprintf+0xf8>
    12ca:	36 fc       	sbrc	r3, 6
    12cc:	81 c1       	rjmp	.+770    	; 0x15d0 <vfprintf+0x3d0>
    12ce:	23 2d       	mov	r18, r3
    12d0:	20 64       	ori	r18, 0x40	; 64
    12d2:	32 2e       	mov	r3, r18
    12d4:	19 c0       	rjmp	.+50     	; 0x1308 <vfprintf+0x108>
    12d6:	36 fe       	sbrs	r3, 6
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <vfprintf+0xe6>
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	98 9e       	mul	r9, r24
    12de:	20 0d       	add	r18, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	92 2e       	mov	r9, r18
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <vfprintf+0x108>
    12e6:	ea e0       	ldi	r30, 0x0A	; 10
    12e8:	2e 9e       	mul	r2, r30
    12ea:	20 0d       	add	r18, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	22 2e       	mov	r2, r18
    12f0:	f3 2d       	mov	r31, r3
    12f2:	f0 62       	ori	r31, 0x20	; 32
    12f4:	3f 2e       	mov	r3, r31
    12f6:	08 c0       	rjmp	.+16     	; 0x1308 <vfprintf+0x108>
    12f8:	8c 36       	cpi	r24, 0x6C	; 108
    12fa:	21 f4       	brne	.+8      	; 0x1304 <vfprintf+0x104>
    12fc:	83 2d       	mov	r24, r3
    12fe:	80 68       	ori	r24, 0x80	; 128
    1300:	38 2e       	mov	r3, r24
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x108>
    1304:	88 36       	cpi	r24, 0x68	; 104
    1306:	41 f4       	brne	.+16     	; 0x1318 <vfprintf+0x118>
    1308:	f7 01       	movw	r30, r14
    130a:	93 fd       	sbrc	r25, 3
    130c:	85 91       	lpm	r24, Z+
    130e:	93 ff       	sbrs	r25, 3
    1310:	81 91       	ld	r24, Z+
    1312:	7f 01       	movw	r14, r30
    1314:	81 11       	cpse	r24, r1
    1316:	b3 cf       	rjmp	.-154    	; 0x127e <vfprintf+0x7e>
    1318:	98 2f       	mov	r25, r24
    131a:	9f 7d       	andi	r25, 0xDF	; 223
    131c:	95 54       	subi	r25, 0x45	; 69
    131e:	93 30       	cpi	r25, 0x03	; 3
    1320:	28 f4       	brcc	.+10     	; 0x132c <vfprintf+0x12c>
    1322:	0c 5f       	subi	r16, 0xFC	; 252
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	9f e3       	ldi	r25, 0x3F	; 63
    1328:	99 83       	std	Y+1, r25	; 0x01
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <vfprintf+0x146>
    132c:	83 36       	cpi	r24, 0x63	; 99
    132e:	31 f0       	breq	.+12     	; 0x133c <vfprintf+0x13c>
    1330:	83 37       	cpi	r24, 0x73	; 115
    1332:	71 f0       	breq	.+28     	; 0x1350 <vfprintf+0x150>
    1334:	83 35       	cpi	r24, 0x53	; 83
    1336:	09 f0       	breq	.+2      	; 0x133a <vfprintf+0x13a>
    1338:	59 c0       	rjmp	.+178    	; 0x13ec <vfprintf+0x1ec>
    133a:	21 c0       	rjmp	.+66     	; 0x137e <vfprintf+0x17e>
    133c:	f8 01       	movw	r30, r16
    133e:	80 81       	ld	r24, Z
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	0e 5f       	subi	r16, 0xFE	; 254
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	88 24       	eor	r8, r8
    1348:	83 94       	inc	r8
    134a:	91 2c       	mov	r9, r1
    134c:	53 01       	movw	r10, r6
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <vfprintf+0x176>
    1350:	28 01       	movw	r4, r16
    1352:	f2 e0       	ldi	r31, 0x02	; 2
    1354:	4f 0e       	add	r4, r31
    1356:	51 1c       	adc	r5, r1
    1358:	f8 01       	movw	r30, r16
    135a:	a0 80       	ld	r10, Z
    135c:	b1 80       	ldd	r11, Z+1	; 0x01
    135e:	36 fe       	sbrs	r3, 6
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <vfprintf+0x168>
    1362:	69 2d       	mov	r22, r9
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x16c>
    1368:	6f ef       	ldi	r22, 0xFF	; 255
    136a:	7f ef       	ldi	r23, 0xFF	; 255
    136c:	c5 01       	movw	r24, r10
    136e:	0e 94 0f 0b 	call	0x161e	; 0x161e <strnlen>
    1372:	4c 01       	movw	r8, r24
    1374:	82 01       	movw	r16, r4
    1376:	f3 2d       	mov	r31, r3
    1378:	ff 77       	andi	r31, 0x7F	; 127
    137a:	3f 2e       	mov	r3, r31
    137c:	16 c0       	rjmp	.+44     	; 0x13aa <vfprintf+0x1aa>
    137e:	28 01       	movw	r4, r16
    1380:	22 e0       	ldi	r18, 0x02	; 2
    1382:	42 0e       	add	r4, r18
    1384:	51 1c       	adc	r5, r1
    1386:	f8 01       	movw	r30, r16
    1388:	a0 80       	ld	r10, Z
    138a:	b1 80       	ldd	r11, Z+1	; 0x01
    138c:	36 fe       	sbrs	r3, 6
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <vfprintf+0x196>
    1390:	69 2d       	mov	r22, r9
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x19a>
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	7f ef       	ldi	r23, 0xFF	; 255
    139a:	c5 01       	movw	r24, r10
    139c:	0e 94 04 0b 	call	0x1608	; 0x1608 <strnlen_P>
    13a0:	4c 01       	movw	r8, r24
    13a2:	f3 2d       	mov	r31, r3
    13a4:	f0 68       	ori	r31, 0x80	; 128
    13a6:	3f 2e       	mov	r3, r31
    13a8:	82 01       	movw	r16, r4
    13aa:	33 fc       	sbrc	r3, 3
    13ac:	1b c0       	rjmp	.+54     	; 0x13e4 <vfprintf+0x1e4>
    13ae:	82 2d       	mov	r24, r2
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	88 16       	cp	r8, r24
    13b4:	99 06       	cpc	r9, r25
    13b6:	b0 f4       	brcc	.+44     	; 0x13e4 <vfprintf+0x1e4>
    13b8:	b6 01       	movw	r22, r12
    13ba:	80 e2       	ldi	r24, 0x20	; 32
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    13c2:	2a 94       	dec	r2
    13c4:	f4 cf       	rjmp	.-24     	; 0x13ae <vfprintf+0x1ae>
    13c6:	f5 01       	movw	r30, r10
    13c8:	37 fc       	sbrc	r3, 7
    13ca:	85 91       	lpm	r24, Z+
    13cc:	37 fe       	sbrs	r3, 7
    13ce:	81 91       	ld	r24, Z+
    13d0:	5f 01       	movw	r10, r30
    13d2:	b6 01       	movw	r22, r12
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    13da:	21 10       	cpse	r2, r1
    13dc:	2a 94       	dec	r2
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	82 1a       	sub	r8, r18
    13e2:	91 08       	sbc	r9, r1
    13e4:	81 14       	cp	r8, r1
    13e6:	91 04       	cpc	r9, r1
    13e8:	71 f7       	brne	.-36     	; 0x13c6 <vfprintf+0x1c6>
    13ea:	e8 c0       	rjmp	.+464    	; 0x15bc <vfprintf+0x3bc>
    13ec:	84 36       	cpi	r24, 0x64	; 100
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <vfprintf+0x1f4>
    13f0:	89 36       	cpi	r24, 0x69	; 105
    13f2:	41 f5       	brne	.+80     	; 0x1444 <vfprintf+0x244>
    13f4:	f8 01       	movw	r30, r16
    13f6:	37 fe       	sbrs	r3, 7
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <vfprintf+0x208>
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0c 5f       	subi	r16, 0xFC	; 252
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <vfprintf+0x218>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	07 2e       	mov	r0, r23
    140e:	00 0c       	add	r0, r0
    1410:	88 0b       	sbc	r24, r24
    1412:	99 0b       	sbc	r25, r25
    1414:	0e 5f       	subi	r16, 0xFE	; 254
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	f3 2d       	mov	r31, r3
    141a:	ff 76       	andi	r31, 0x6F	; 111
    141c:	3f 2e       	mov	r3, r31
    141e:	97 ff       	sbrs	r25, 7
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <vfprintf+0x234>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	f0 68       	ori	r31, 0x80	; 128
    1432:	3f 2e       	mov	r3, r31
    1434:	2a e0       	ldi	r18, 0x0A	; 10
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a3 01       	movw	r20, r6
    143a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__ultoa_invert>
    143e:	88 2e       	mov	r8, r24
    1440:	86 18       	sub	r8, r6
    1442:	45 c0       	rjmp	.+138    	; 0x14ce <vfprintf+0x2ce>
    1444:	85 37       	cpi	r24, 0x75	; 117
    1446:	31 f4       	brne	.+12     	; 0x1454 <vfprintf+0x254>
    1448:	23 2d       	mov	r18, r3
    144a:	2f 7e       	andi	r18, 0xEF	; 239
    144c:	b2 2e       	mov	r11, r18
    144e:	2a e0       	ldi	r18, 0x0A	; 10
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	25 c0       	rjmp	.+74     	; 0x149e <vfprintf+0x29e>
    1454:	93 2d       	mov	r25, r3
    1456:	99 7f       	andi	r25, 0xF9	; 249
    1458:	b9 2e       	mov	r11, r25
    145a:	8f 36       	cpi	r24, 0x6F	; 111
    145c:	c1 f0       	breq	.+48     	; 0x148e <vfprintf+0x28e>
    145e:	18 f4       	brcc	.+6      	; 0x1466 <vfprintf+0x266>
    1460:	88 35       	cpi	r24, 0x58	; 88
    1462:	79 f0       	breq	.+30     	; 0x1482 <vfprintf+0x282>
    1464:	b5 c0       	rjmp	.+362    	; 0x15d0 <vfprintf+0x3d0>
    1466:	80 37       	cpi	r24, 0x70	; 112
    1468:	19 f0       	breq	.+6      	; 0x1470 <vfprintf+0x270>
    146a:	88 37       	cpi	r24, 0x78	; 120
    146c:	21 f0       	breq	.+8      	; 0x1476 <vfprintf+0x276>
    146e:	b0 c0       	rjmp	.+352    	; 0x15d0 <vfprintf+0x3d0>
    1470:	e9 2f       	mov	r30, r25
    1472:	e0 61       	ori	r30, 0x10	; 16
    1474:	be 2e       	mov	r11, r30
    1476:	b4 fe       	sbrs	r11, 4
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <vfprintf+0x294>
    147a:	fb 2d       	mov	r31, r11
    147c:	f4 60       	ori	r31, 0x04	; 4
    147e:	bf 2e       	mov	r11, r31
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <vfprintf+0x294>
    1482:	34 fe       	sbrs	r3, 4
    1484:	0a c0       	rjmp	.+20     	; 0x149a <vfprintf+0x29a>
    1486:	29 2f       	mov	r18, r25
    1488:	26 60       	ori	r18, 0x06	; 6
    148a:	b2 2e       	mov	r11, r18
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x29a>
    148e:	28 e0       	ldi	r18, 0x08	; 8
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	05 c0       	rjmp	.+10     	; 0x149e <vfprintf+0x29e>
    1494:	20 e1       	ldi	r18, 0x10	; 16
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x29e>
    149a:	20 e1       	ldi	r18, 0x10	; 16
    149c:	32 e0       	ldi	r19, 0x02	; 2
    149e:	f8 01       	movw	r30, r16
    14a0:	b7 fe       	sbrs	r11, 7
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <vfprintf+0x2b2>
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	0c 5f       	subi	r16, 0xFC	; 252
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0x2be>
    14b2:	60 81       	ld	r22, Z
    14b4:	71 81       	ldd	r23, Z+1	; 0x01
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 5f       	subi	r16, 0xFE	; 254
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	a3 01       	movw	r20, r6
    14c0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__ultoa_invert>
    14c4:	88 2e       	mov	r8, r24
    14c6:	86 18       	sub	r8, r6
    14c8:	fb 2d       	mov	r31, r11
    14ca:	ff 77       	andi	r31, 0x7F	; 127
    14cc:	3f 2e       	mov	r3, r31
    14ce:	36 fe       	sbrs	r3, 6
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <vfprintf+0x2ec>
    14d2:	23 2d       	mov	r18, r3
    14d4:	2e 7f       	andi	r18, 0xFE	; 254
    14d6:	a2 2e       	mov	r10, r18
    14d8:	89 14       	cp	r8, r9
    14da:	58 f4       	brcc	.+22     	; 0x14f2 <vfprintf+0x2f2>
    14dc:	34 fe       	sbrs	r3, 4
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <vfprintf+0x2f6>
    14e0:	32 fc       	sbrc	r3, 2
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <vfprintf+0x2f6>
    14e4:	83 2d       	mov	r24, r3
    14e6:	8e 7e       	andi	r24, 0xEE	; 238
    14e8:	a8 2e       	mov	r10, r24
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <vfprintf+0x2f6>
    14ec:	b8 2c       	mov	r11, r8
    14ee:	a3 2c       	mov	r10, r3
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <vfprintf+0x2f8>
    14f2:	b8 2c       	mov	r11, r8
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <vfprintf+0x2f8>
    14f6:	b9 2c       	mov	r11, r9
    14f8:	a4 fe       	sbrs	r10, 4
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <vfprintf+0x31a>
    14fc:	fe 01       	movw	r30, r28
    14fe:	e8 0d       	add	r30, r8
    1500:	f1 1d       	adc	r31, r1
    1502:	80 81       	ld	r24, Z
    1504:	80 33       	cpi	r24, 0x30	; 48
    1506:	21 f4       	brne	.+8      	; 0x1510 <vfprintf+0x310>
    1508:	9a 2d       	mov	r25, r10
    150a:	99 7e       	andi	r25, 0xE9	; 233
    150c:	a9 2e       	mov	r10, r25
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <vfprintf+0x322>
    1510:	a2 fe       	sbrs	r10, 2
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <vfprintf+0x320>
    1514:	b3 94       	inc	r11
    1516:	b3 94       	inc	r11
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <vfprintf+0x322>
    151a:	8a 2d       	mov	r24, r10
    151c:	86 78       	andi	r24, 0x86	; 134
    151e:	09 f0       	breq	.+2      	; 0x1522 <vfprintf+0x322>
    1520:	b3 94       	inc	r11
    1522:	a3 fc       	sbrc	r10, 3
    1524:	11 c0       	rjmp	.+34     	; 0x1548 <vfprintf+0x348>
    1526:	a0 fe       	sbrs	r10, 0
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <vfprintf+0x336>
    152a:	b2 14       	cp	r11, r2
    152c:	88 f4       	brcc	.+34     	; 0x1550 <vfprintf+0x350>
    152e:	28 0c       	add	r2, r8
    1530:	92 2c       	mov	r9, r2
    1532:	9b 18       	sub	r9, r11
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <vfprintf+0x352>
    1536:	b2 14       	cp	r11, r2
    1538:	60 f4       	brcc	.+24     	; 0x1552 <vfprintf+0x352>
    153a:	b6 01       	movw	r22, r12
    153c:	80 e2       	ldi	r24, 0x20	; 32
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    1544:	b3 94       	inc	r11
    1546:	f7 cf       	rjmp	.-18     	; 0x1536 <vfprintf+0x336>
    1548:	b2 14       	cp	r11, r2
    154a:	18 f4       	brcc	.+6      	; 0x1552 <vfprintf+0x352>
    154c:	2b 18       	sub	r2, r11
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x354>
    1550:	98 2c       	mov	r9, r8
    1552:	21 2c       	mov	r2, r1
    1554:	a4 fe       	sbrs	r10, 4
    1556:	10 c0       	rjmp	.+32     	; 0x1578 <vfprintf+0x378>
    1558:	b6 01       	movw	r22, r12
    155a:	80 e3       	ldi	r24, 0x30	; 48
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    1562:	a2 fe       	sbrs	r10, 2
    1564:	17 c0       	rjmp	.+46     	; 0x1594 <vfprintf+0x394>
    1566:	a1 fc       	sbrc	r10, 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <vfprintf+0x370>
    156a:	88 e7       	ldi	r24, 0x78	; 120
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x374>
    1570:	88 e5       	ldi	r24, 0x58	; 88
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b6 01       	movw	r22, r12
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <vfprintf+0x390>
    1578:	8a 2d       	mov	r24, r10
    157a:	86 78       	andi	r24, 0x86	; 134
    157c:	59 f0       	breq	.+22     	; 0x1594 <vfprintf+0x394>
    157e:	a1 fe       	sbrs	r10, 1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x386>
    1582:	8b e2       	ldi	r24, 0x2B	; 43
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <vfprintf+0x388>
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	a7 fc       	sbrc	r10, 7
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	b6 01       	movw	r22, r12
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    1594:	89 14       	cp	r8, r9
    1596:	38 f4       	brcc	.+14     	; 0x15a6 <vfprintf+0x3a6>
    1598:	b6 01       	movw	r22, r12
    159a:	80 e3       	ldi	r24, 0x30	; 48
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    15a2:	9a 94       	dec	r9
    15a4:	f7 cf       	rjmp	.-18     	; 0x1594 <vfprintf+0x394>
    15a6:	8a 94       	dec	r8
    15a8:	f3 01       	movw	r30, r6
    15aa:	e8 0d       	add	r30, r8
    15ac:	f1 1d       	adc	r31, r1
    15ae:	80 81       	ld	r24, Z
    15b0:	b6 01       	movw	r22, r12
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    15b8:	81 10       	cpse	r8, r1
    15ba:	f5 cf       	rjmp	.-22     	; 0x15a6 <vfprintf+0x3a6>
    15bc:	22 20       	and	r2, r2
    15be:	09 f4       	brne	.+2      	; 0x15c2 <vfprintf+0x3c2>
    15c0:	42 ce       	rjmp	.-892    	; 0x1246 <vfprintf+0x46>
    15c2:	b6 01       	movw	r22, r12
    15c4:	80 e2       	ldi	r24, 0x20	; 32
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <fputc>
    15cc:	2a 94       	dec	r2
    15ce:	f6 cf       	rjmp	.-20     	; 0x15bc <vfprintf+0x3bc>
    15d0:	f6 01       	movw	r30, r12
    15d2:	86 81       	ldd	r24, Z+6	; 0x06
    15d4:	97 81       	ldd	r25, Z+7	; 0x07
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x3dc>
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	2b 96       	adiw	r28, 0x0b	; 11
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	cf 90       	pop	r12
    15f2:	bf 90       	pop	r11
    15f4:	af 90       	pop	r10
    15f6:	9f 90       	pop	r9
    15f8:	8f 90       	pop	r8
    15fa:	7f 90       	pop	r7
    15fc:	6f 90       	pop	r6
    15fe:	5f 90       	pop	r5
    1600:	4f 90       	pop	r4
    1602:	3f 90       	pop	r3
    1604:	2f 90       	pop	r2
    1606:	08 95       	ret

00001608 <strnlen_P>:
    1608:	fc 01       	movw	r30, r24
    160a:	05 90       	lpm	r0, Z+
    160c:	61 50       	subi	r22, 0x01	; 1
    160e:	70 40       	sbci	r23, 0x00	; 0
    1610:	01 10       	cpse	r0, r1
    1612:	d8 f7       	brcc	.-10     	; 0x160a <strnlen_P+0x2>
    1614:	80 95       	com	r24
    1616:	90 95       	com	r25
    1618:	8e 0f       	add	r24, r30
    161a:	9f 1f       	adc	r25, r31
    161c:	08 95       	ret

0000161e <strnlen>:
    161e:	fc 01       	movw	r30, r24
    1620:	61 50       	subi	r22, 0x01	; 1
    1622:	70 40       	sbci	r23, 0x00	; 0
    1624:	01 90       	ld	r0, Z+
    1626:	01 10       	cpse	r0, r1
    1628:	d8 f7       	brcc	.-10     	; 0x1620 <strnlen+0x2>
    162a:	80 95       	com	r24
    162c:	90 95       	com	r25
    162e:	8e 0f       	add	r24, r30
    1630:	9f 1f       	adc	r25, r31
    1632:	08 95       	ret

00001634 <fputc>:
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	fb 01       	movw	r30, r22
    163e:	23 81       	ldd	r18, Z+3	; 0x03
    1640:	21 fd       	sbrc	r18, 1
    1642:	03 c0       	rjmp	.+6      	; 0x164a <fputc+0x16>
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	2c c0       	rjmp	.+88     	; 0x16a2 <fputc+0x6e>
    164a:	22 ff       	sbrs	r18, 2
    164c:	16 c0       	rjmp	.+44     	; 0x167a <fputc+0x46>
    164e:	46 81       	ldd	r20, Z+6	; 0x06
    1650:	57 81       	ldd	r21, Z+7	; 0x07
    1652:	24 81       	ldd	r18, Z+4	; 0x04
    1654:	35 81       	ldd	r19, Z+5	; 0x05
    1656:	42 17       	cp	r20, r18
    1658:	53 07       	cpc	r21, r19
    165a:	44 f4       	brge	.+16     	; 0x166c <fputc+0x38>
    165c:	a0 81       	ld	r26, Z
    165e:	b1 81       	ldd	r27, Z+1	; 0x01
    1660:	9d 01       	movw	r18, r26
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	20 83       	st	Z, r18
    1668:	31 83       	std	Z+1, r19	; 0x01
    166a:	8c 93       	st	X, r24
    166c:	26 81       	ldd	r18, Z+6	; 0x06
    166e:	37 81       	ldd	r19, Z+7	; 0x07
    1670:	2f 5f       	subi	r18, 0xFF	; 255
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	26 83       	std	Z+6, r18	; 0x06
    1676:	37 83       	std	Z+7, r19	; 0x07
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <fputc+0x6e>
    167a:	8b 01       	movw	r16, r22
    167c:	ec 01       	movw	r28, r24
    167e:	fb 01       	movw	r30, r22
    1680:	00 84       	ldd	r0, Z+8	; 0x08
    1682:	f1 85       	ldd	r31, Z+9	; 0x09
    1684:	e0 2d       	mov	r30, r0
    1686:	19 95       	eicall
    1688:	89 2b       	or	r24, r25
    168a:	e1 f6       	brne	.-72     	; 0x1644 <fputc+0x10>
    168c:	d8 01       	movw	r26, r16
    168e:	16 96       	adiw	r26, 0x06	; 6
    1690:	8d 91       	ld	r24, X+
    1692:	9c 91       	ld	r25, X
    1694:	17 97       	sbiw	r26, 0x07	; 7
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	16 96       	adiw	r26, 0x06	; 6
    169a:	8d 93       	st	X+, r24
    169c:	9c 93       	st	X, r25
    169e:	17 97       	sbiw	r26, 0x07	; 7
    16a0:	ce 01       	movw	r24, r28
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	08 95       	ret

000016ac <__ultoa_invert>:
    16ac:	fa 01       	movw	r30, r20
    16ae:	aa 27       	eor	r26, r26
    16b0:	28 30       	cpi	r18, 0x08	; 8
    16b2:	51 f1       	breq	.+84     	; 0x1708 <__ultoa_invert+0x5c>
    16b4:	20 31       	cpi	r18, 0x10	; 16
    16b6:	81 f1       	breq	.+96     	; 0x1718 <__ultoa_invert+0x6c>
    16b8:	e8 94       	clt
    16ba:	6f 93       	push	r22
    16bc:	6e 7f       	andi	r22, 0xFE	; 254
    16be:	6e 5f       	subi	r22, 0xFE	; 254
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	af 4f       	sbci	r26, 0xFF	; 255
    16c8:	b1 e0       	ldi	r27, 0x01	; 1
    16ca:	3e d0       	rcall	.+124    	; 0x1748 <__ultoa_invert+0x9c>
    16cc:	b4 e0       	ldi	r27, 0x04	; 4
    16ce:	3c d0       	rcall	.+120    	; 0x1748 <__ultoa_invert+0x9c>
    16d0:	67 0f       	add	r22, r23
    16d2:	78 1f       	adc	r23, r24
    16d4:	89 1f       	adc	r24, r25
    16d6:	9a 1f       	adc	r25, r26
    16d8:	a1 1d       	adc	r26, r1
    16da:	68 0f       	add	r22, r24
    16dc:	79 1f       	adc	r23, r25
    16de:	8a 1f       	adc	r24, r26
    16e0:	91 1d       	adc	r25, r1
    16e2:	a1 1d       	adc	r26, r1
    16e4:	6a 0f       	add	r22, r26
    16e6:	71 1d       	adc	r23, r1
    16e8:	81 1d       	adc	r24, r1
    16ea:	91 1d       	adc	r25, r1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	20 d0       	rcall	.+64     	; 0x1730 <__ultoa_invert+0x84>
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__ultoa_invert+0x48>
    16f2:	68 94       	set
    16f4:	3f 91       	pop	r19
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	26 9f       	mul	r18, r22
    16fa:	11 24       	eor	r1, r1
    16fc:	30 19       	sub	r19, r0
    16fe:	30 5d       	subi	r19, 0xD0	; 208
    1700:	31 93       	st	Z+, r19
    1702:	de f6       	brtc	.-74     	; 0x16ba <__ultoa_invert+0xe>
    1704:	cf 01       	movw	r24, r30
    1706:	08 95       	ret
    1708:	46 2f       	mov	r20, r22
    170a:	47 70       	andi	r20, 0x07	; 7
    170c:	40 5d       	subi	r20, 0xD0	; 208
    170e:	41 93       	st	Z+, r20
    1710:	b3 e0       	ldi	r27, 0x03	; 3
    1712:	0f d0       	rcall	.+30     	; 0x1732 <__ultoa_invert+0x86>
    1714:	c9 f7       	brne	.-14     	; 0x1708 <__ultoa_invert+0x5c>
    1716:	f6 cf       	rjmp	.-20     	; 0x1704 <__ultoa_invert+0x58>
    1718:	46 2f       	mov	r20, r22
    171a:	4f 70       	andi	r20, 0x0F	; 15
    171c:	40 5d       	subi	r20, 0xD0	; 208
    171e:	4a 33       	cpi	r20, 0x3A	; 58
    1720:	18 f0       	brcs	.+6      	; 0x1728 <__ultoa_invert+0x7c>
    1722:	49 5d       	subi	r20, 0xD9	; 217
    1724:	31 fd       	sbrc	r19, 1
    1726:	40 52       	subi	r20, 0x20	; 32
    1728:	41 93       	st	Z+, r20
    172a:	02 d0       	rcall	.+4      	; 0x1730 <__ultoa_invert+0x84>
    172c:	a9 f7       	brne	.-22     	; 0x1718 <__ultoa_invert+0x6c>
    172e:	ea cf       	rjmp	.-44     	; 0x1704 <__ultoa_invert+0x58>
    1730:	b4 e0       	ldi	r27, 0x04	; 4
    1732:	a6 95       	lsr	r26
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	ba 95       	dec	r27
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__ultoa_invert+0x86>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	61 05       	cpc	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	08 95       	ret
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	0a 2e       	mov	r0, r26
    174e:	06 94       	lsr	r0
    1750:	57 95       	ror	r21
    1752:	47 95       	ror	r20
    1754:	37 95       	ror	r19
    1756:	27 95       	ror	r18
    1758:	ba 95       	dec	r27
    175a:	c9 f7       	brne	.-14     	; 0x174e <__ultoa_invert+0xa2>
    175c:	62 0f       	add	r22, r18
    175e:	73 1f       	adc	r23, r19
    1760:	84 1f       	adc	r24, r20
    1762:	95 1f       	adc	r25, r21
    1764:	a0 1d       	adc	r26, r0
    1766:	08 95       	ret

00001768 <_exit>:
    1768:	f8 94       	cli

0000176a <__stop_program>:
    176a:	ff cf       	rjmp	.-2      	; 0x176a <__stop_program>
